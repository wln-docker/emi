<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wlniao.XCore</name>
    </assembly>
    <members>
        <member name="T:Wlniao.ApiLog">
            <summary>
            API日志
            </summary>
        </member>
        <member name="P:Wlniao.ApiLog.status">
            <summary>
            结果是否有效
            </summary>
        </member>
        <member name="P:Wlniao.ApiLog.trace">
            <summary>
            链路追踪ID
            </summary>
        </member>
        <member name="F:Wlniao.ApiLog._apinode">
            <summary>
            所请求的API节点
            </summary>
        </member>
        <member name="P:Wlniao.ApiLog.apinode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.ApiLog._apiurl">
            <summary>
            A所请求的API地址
            </summary>
        </member>
        <member name="P:Wlniao.ApiLog.apiurl">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.ApiLog._message">
            <summary>
            请求结果
            </summary>
        </member>
        <member name="P:Wlniao.ApiLog.message">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.ApiLog.usetime">
            <summary>
            请求所花时间 单位ms
            </summary>
        </member>
        <member name="M:Wlniao.ApiLog.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="ApiNode"></param>
            <param name="ApiUrl"></param>
        </member>
        <member name="M:Wlniao.ApiLog.Success(System.String)">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.ApiLog.Failed(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.ApiLog.Failed(System.Exception)">
            <summary>
            
            </summary>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.ApiResult`1">
            <summary>
            API返回结果类型
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Wlniao.ApiResult`1.success">
            <summary>
            结果是否有效
            </summary>
        </member>
        <member name="P:Wlniao.ApiResult`1.debuger">
            <summary>
            返回的调试消息
            </summary>
        </member>
        <member name="P:Wlniao.ApiResult`1.message">
            <summary>
            附带返回的消息
            </summary>
        </member>
        <member name="P:Wlniao.ApiResult`1.traceid">
            <summary>
            链路追踪ID
            </summary>
        </member>
        <member name="P:Wlniao.ApiResult`1.tips">
            <summary>
            可否直接输出提示消息
            </summary>
        </member>
        <member name="P:Wlniao.ApiResult`1.node">
            <summary>
            错误消息提供节点
            </summary>
        </member>
        <member name="P:Wlniao.ApiResult`1.code">
            <summary>
            状态码
            </summary>
        </member>
        <member name="P:Wlniao.ApiResult`1.data">
            <summary>
            附带返回的数据
            </summary>
        </member>
        <member name="P:Wlniao.ApiResult`1.logs">
            <summary>
            请求日志
            </summary>
        </member>
        <member name="M:Wlniao.ApiResult`1.PutLog(Wlniao.ApiLog)">
            <summary>
            
            </summary>
            <param name="apiLog"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.PutLog(System.Collections.Generic.List{Wlniao.ApiLog})">
            <summary>
            
            </summary>
            <param name="apiLogs"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.ApiResult`1.#ctor(Wlniao.ApiLog)">
            <summary>
            
            </summary>
            <param name="apiLog"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.#ctor(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Message"></param>
            <param name="Success"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.#ctor(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="Node"></param>
            <param name="Code"></param>
            <param name="Message"></param>
            <param name="Success"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.#ctor(System.Collections.Generic.List{Wlniao.ApiLog})">
            <summary>
            
            </summary>
            <param name="apiLogs"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.AddLog(System.String)">
            <summary>
            拼接日志内容
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.AddLog(System.String,System.String)">
            <summary>
            拼接日志内容
            </summary>
            <param name="log"></param>
            <param name="node"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.AddLog(System.String,System.String,System.String)">
            <summary>
            拼接日志内容
            </summary>
            <param name="log"></param>
            <param name="node"></param>
            <param name="apiurl"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.AddLog(Wlniao.ApiLog)">
            <summary>
            拼接日志内容
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.AddLogs(System.Collections.Generic.List{System.String})">
            <summary>
            拼接日志内容
            </summary>
            <param name="logs"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.AddLogs(System.Collections.Generic.List{System.String},System.String)">
            <summary>
            拼接日志内容
            </summary>
            <param name="logs"></param>
            <param name="node"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.AddLogs(System.Collections.Generic.List{System.String},System.String,System.String)">
            <summary>
            拼接日志内容
            </summary>
            <param name="logs"></param>
            <param name="node"></param>
            <param name="apiurl"></param>
        </member>
        <member name="M:Wlniao.ApiResult`1.AddLogs(System.Collections.Generic.List{Wlniao.ApiLog})">
            <summary>
            拼接日志内容
            </summary>
            <param name="logs"></param>
        </member>
        <member name="T:Wlniao.Caching.Cache">
            <summary>
            缓存管理
            </summary>
        </member>
        <member name="M:Wlniao.Caching.Cache.UseRedis(System.String)">
            <summary>
            启用Redis作为缓存机制
            </summary>
            <param name="connstr"></param>
        </member>
        <member name="M:Wlniao.Caching.Cache.UseRedis(System.String,System.String,System.String)">
            <summary>
            启用Redis作为缓存机制
            </summary>
            <param name="server"></param>
            <param name="username"></param>
            <param name="password"></param>
        </member>
        <member name="M:Wlniao.Caching.Cache.Set(System.String,System.String,System.Int32)">
            <summary>
            缓存一个字符串
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds">缓存过期时间（秒）</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Caching.Cache.Set``1(System.String,``0,System.Int32)">
            <summary>
            缓存一个对象实例
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">缓存的Key值</param>
            <param name="obj">要缓存的对象</param>
            <param name="expireSeconds">缓存过期时间（秒）</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Caching.Cache.Del(System.String)">
            <summary>
            删除缓存内容
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Caching.Cache.Exists(System.String)">
            <summary>
            判断是否存在缓存项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Caching.Cache.Get(System.String)">
            <summary>
            获取一个缓存项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Caching.Cache.GetAllowNull(System.String)">
            <summary>
            获取一个缓存项（允许null）
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Caching.Cache.Get``1(System.String)">
            <summary>
            获取一个缓存项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:Wlniao.Caching.Cache.CachePath">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Caching.Cache.LocalSet(System.String,System.String)">
            <summary>
            缓存一个字符串
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Caching.Cache.LocalGet(System.String,System.Int32)">
            <summary>
            获取一个缓存项
            </summary>
            <param name="key"></param>
            <param name="expireSeconds">缓存过期时间（秒）</param>
        </member>
        <member name="T:Wlniao.Caching.CacheData">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Caching.CacheData.Expire">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Caching.CacheData.Value">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.Caching.CacheType">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Caching.CacheType.InMemory">
            <summary>
            当前内存作为缓存
            </summary>
        </member>
        <member name="F:Wlniao.Caching.CacheType.Redis">
            <summary>
            Redis服务器作为缓存
            </summary>
        </member>
        <member name="F:Wlniao.Caching.CacheType.None">
            <summary>
            不缓存
            </summary>
        </member>
        <member name="T:Wlniao.Caching.InMemory">
            <summary>
            InMemory缓存
            </summary>
        </member>
        <member name="M:Wlniao.Caching.InMemory.Set(System.String,System.String,System.Int32)">
            <summary>
            设置缓存内容
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expireSeconds"></param>
        </member>
        <member name="M:Wlniao.Caching.InMemory.Set``1(System.String,``0,System.Int32)">
            <summary>
            设置缓存内容
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expireSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Caching.InMemory.Del(System.String)">
            <summary>
            删除缓存内容
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Caching.InMemory.RangeDelete(System.String)">
            <summary>
            删除缓存内容
            </summary>
            <param name="keys"></param>
        </member>
        <member name="M:Wlniao.Caching.InMemory.Exists(System.String)">
            <summary>
            判断是否存在缓存项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Caching.InMemory.Get(System.String)">
            <summary>
            获取一个缓存项
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Caching.InMemory.GetAllowNull(System.String)">
            <summary>
            获取一个缓存项（允许null）
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Caching.InMemory.Get``1(System.String)">
            <summary>
            获取一个缓存项
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Caching.Redis">
            <summary>
            Redis缓存
            </summary>
        </member>
        <member name="F:Wlniao.Caching.Redis.Select">
            <summary>
            使用的数据库序号
            </summary>
        </member>
        <member name="P:Wlniao.Caching.Redis.CanUse">
            <summary>
            判断Redis缓存是否可用
            </summary>
        </member>
        <member name="F:Wlniao.Caching.Redis.nextconnect">
            <summary>
            下次尝试链接时间
            </summary>
        </member>
        <member name="P:Wlniao.Caching.Redis.Instance">
            <summary>
            数据库链接字符串
            </summary>
        </member>
        <member name="M:Wlniao.Caching.Redis.UseConnStr(System.String)">
            <summary>
            应用连接字符串
            </summary>
            <param name="connstr"></param>
        </member>
        <member name="M:Wlniao.Caching.Redis.Get(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Caching.Redis.Get``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Caching.Redis.Set(System.String,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expire"></param>
        </member>
        <member name="M:Wlniao.Caching.Redis.Set(System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expire"></param>
        </member>
        <member name="M:Wlniao.Caching.Redis.Set``1(System.String,``0,System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="obj"></param>
            <param name="expire"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Caching.Redis.KeyDelete(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Caching.Redis.KeyExists(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Wlniao.Config">
            <summary>
            读取、修改配置文件的辅助类
            </summary>
            <remarks>
            每行包括键和值，中间的分隔符默认是英文冒号。
            如果某行以双斜杠 // 或井号 # 开头，就表示此行内容是注释
            </remarks>
        </member>
        <member name="F:Wlniao.Config._env">
            <summary>
            环境变量内容
            </summary>
        </member>
        <member name="F:Wlniao.Config._config">
            <summary>
            环境变量内容
            </summary>
        </member>
        <member name="F:Wlniao.Config._file">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Config.Secret">
            <summary>
            配置文件密钥
            </summary>
        </member>
        <member name="P:Wlniao.Config.FileName">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="M:Wlniao.Config.Clear">
            <summary>
            重置配置文件内容
            </summary>
        </member>
        <member name="M:Wlniao.Config.GetSetting(System.String,System.String)">
            <summary>
            获取设置信息（优先查找环境变量，再查找xcore.config中配置，默认值非null时向xcore.config中写入默认值）
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Config.GetEncrypt(System.String,System.String,System.String)">
            <summary>
            获取 ConfigFile 中某项的值
            </summary>
            <param name="key">项的名称</param>
            <param name="secret">SM4密钥</param>
            <param name="defaultValue">默认值</param>
            <returns>返回一个字符串值</returns>
        </member>
        <member name="M:Wlniao.Config.GetConfigs(System.String,System.String)">
            <summary>
            获取 ConfigFile 中某项的值
            </summary>
            <param name="key">项的名称</param>
            <param name="defaultValue">默认值</param>
            <returns>返回一个字符串值</returns>
        </member>
        <member name="M:Wlniao.Config.GetConfigsAutoWrite(System.String,System.String)">
            <summary>
            获取 ConfigFile 中某项的值
            </summary>
            <param name="key">项的名称</param>
            <param name="defaultValue">默认值</param>
            <returns>返回一个字符串值</returns>
        </member>
        <member name="M:Wlniao.Config.GetEnvironment(System.String,System.String)">
            <summary>
            获取环境变量值
            </summary>
            <param name="key">项的名称</param>
            <param name="defaultValue">默认值</param>
            <returns>返回一个字符串值</returns>
        </member>
        <member name="M:Wlniao.Config.SetConfigs(System.String,System.String)">
            <summary>
            设置 xcore.config 中某项的值
            </summary>
            <param name="key">项的名称</param>
            <param name="value">项的值</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Wlniao.Config.SetEncrypt(System.String,System.String,System.String)">
            <summary>
            设置 xcore.config 中某项的值
            </summary>
            <param name="key">项的名称</param>
            <param name="value">项的值</param>
            <param name="secret">SM4密钥</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Wlniao.Config.Remove(System.String)">
            <summary>
            移除 ConfigFile 中某项的值
            </summary>
            <param name="key">项的名称</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:Wlniao.Config.Read(System.String)">
            <summary>
            读取配置文件，返回一个 Dictionary，键值都是字符串
            </summary>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
            <returns>返回一个 Dictionary</returns>
        </member>
        <member name="M:Wlniao.Config.Write(System.Collections.Generic.Dictionary{System.String,System.String},System.String)">
            <summary>
            将 Dictionary 对象持久化到磁盘
            </summary>
            <param name="dic">一个 Dictionary</param>
            <param name="path">配置文件的路径(相对路径，相对于项目的根目录)</param>
        </member>
        <member name="T:Wlniao.Crypto.Helper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.Helper.URShift(System.Int32,System.Int32)">
            <summary>
            使用指定的数字执行无符号按位右移
            </summary>
            <param name="number">要操作的编号</param>
            <param name="bits">要移位的比特数</param>
            <returns>移位操作产生的数字</returns>
        </member>
        <member name="M:Wlniao.Crypto.Helper.URShift(System.Int32,System.Int64)">
            <summary>
            使用指定的数字执行无符号按位右移
            </summary>
            <param name="number">要操作的编号</param>
            <param name="bits">要移位的比特数</param>
            <returns>移位操作产生的数字</returns>
        </member>
        <member name="M:Wlniao.Crypto.Helper.URShift(System.Int64,System.Int32)">
            <summary>
            使用指定的数字执行无符号按位右移
            </summary>
            <param name="number">要操作的编号</param>
            <param name="bits">要移位的比特数</param>
            <returns>移位操作产生的数字</returns>
        </member>
        <member name="M:Wlniao.Crypto.Helper.URShift(System.Int64,System.Int64)">
            <summary>
            使用指定的数字执行无符号按位右移
            </summary>
            <param name="number">要操作的编号</param>
            <param name="bits">要移位的比特数</param>
            <returns>移位操作产生的数字</returns>
        </member>
        <member name="M:Wlniao.Crypto.Helper.Decode(System.String)">
            <summary>
            对Hex及Base64密钥自动编码
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.Helper.Encode(System.Byte[])">
            <summary>
            对Hex及Base64密钥自动编码
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Crypto.KeyType">
            <summary>
            密钥类型
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.KeyType.Generate">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.KeyType.Pkcs8">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.Crypto.KeyTool">
            <summary>
            密钥工具
            </summary>
        </member>
        <member name="P:Wlniao.Crypto.KeyTool.PublicKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Crypto.KeyTool.PrivateKey">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Crypto.KeyTool.PublicKeyParameters">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Crypto.KeyTool.PrivateKeyParameters">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.KeyTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.KeyTool.#ctor(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="pubkey"></param>
            <param name="privkey"></param>
        </member>
        <member name="M:Wlniao.Crypto.KeyTool.#ctor(System.String,System.String,Wlniao.Crypto.KeyType)">
            <summary>
            
            </summary>
            <param name="pubkey"></param>
            <param name="privkey"></param>
            <param name="type"></param>
        </member>
        <member name="M:Wlniao.Crypto.KeyTool.GenerateKey(System.Byte[]@,System.Byte[]@)">
            <summary>
            密钥对生成
            </summary>
            <param name="pubkey"></param>
            <param name="privkey"></param>
        </member>
        <member name="M:Wlniao.Crypto.KeyTool.OutHex(System.String@,System.String@)">
            <summary>
            输出Hex格式的密钥对
            </summary>
            <param name="pubkey"></param>
            <param name="privkey"></param>
        </member>
        <member name="T:Wlniao.Crypto.SM2Mode">
            <summary>
            密文排列方式
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM2Mode.C1C2C3">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM2Mode.C1C3C2">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.Crypto.SM2">
            <summary>
            SM2椭圆曲线公钥密码算法
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.SM2.#ctor(System.Byte[],System.Byte[],Wlniao.Crypto.SM2Mode)">
            <summary>
            
            </summary>
            <param name="pubkey"></param>
            <param name="privkey"></param>
            <param name="mode"></param>
        </member>
        <member name="M:Wlniao.Crypto.SM2.#ctor(System.String,System.String,Wlniao.Crypto.KeyType,Wlniao.Crypto.SM2Mode)">
            <summary>
            
            </summary>
            <param name="pubkey"></param>
            <param name="privkey"></param>
            <param name="type"></param>
            <param name="mode"></param>
        </member>
        <member name="M:Wlniao.Crypto.SM2.Decrypt(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.Decrypt(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.Encrypt(System.Byte[])">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.Encrypt(System.String)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.Sign(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.SignWithRsAsn1(System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.VerifySign(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="signature"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.VerifySign(System.Byte[],System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="signature"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.VerifySignWithRsAsn1(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="signature"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.VerifySignWithRsAsn1(System.Byte[],System.String,System.Byte[])">
            <summary>
            
            </summary>
            <param name="msg"></param>
            <param name="signature"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.RsAsn1ToPlainByteArray(System.Byte[])">
            BC的SM3withSM2签名得到的结果的rs是asn1格式的，这个方法转化成直接拼接r||s
            @param rsDer rs in asn1 format
            @return sign result in plain byte array
        </member>
        <member name="M:Wlniao.Crypto.SM2.RsPlainByteArrayToAsn1(System.Byte[])">
            BC的SM3withSM2验签需要的rs是asn1格式的，这个方法将直接拼接r||s的字节数组转化成asn1格式
            @param sign in plain byte array
            @return rs result in asn1 format
        </member>
        <member name="M:Wlniao.Crypto.SM2.C123ToC132(System.Byte[])">
            <summary>
            
            </summary>
            <param name="c1c2c3"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM2.C132ToC123(System.Byte[])">
            <summary>
            
            </summary>
            <param name="c1c3c2"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Crypto.SM3">
            <summary>
            SM3杂凑算法
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.ByteLength">
            <summary>
            内部缓冲区的大小
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.IV">
            <summary>
            初始值IV
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.v">
            <summary>
            备份的字寄存器
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.v_">
            <summary>
            使用中的字寄存器
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.TOne">
            <summary>
            0到15的Tj常量
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.TSecond">
            <summary>
            16到63的Tj常量
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.XBuf">
            <summary>
            消息摘要
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.XBufOff">
            <summary>
            待更新的消息摘要的索引
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.ByteCount">
            <summary>
            待更新的消息摘要的大小
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM3.DigestLength">
            <summary>
            SM3算法产生的哈希值大小
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.SM3.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.SM3.#ctor(Wlniao.Crypto.SM3)">
            <summary>
            复制构造函数
            </summary>
            <param name="t"></param>
        </member>
        <member name="M:Wlniao.Crypto.SM3.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            用字节块更新消息摘要
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
            <param name="length"></param>
        </member>
        <member name="M:Wlniao.Crypto.SM3.Update(System.Byte)">
            <summary>
            用一个字节更新消息摘要。
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Wlniao.Crypto.SM3.Finish">
            <summary>
            产生最终的摘要值
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.SM3.Reset">
            <summary>
            重启
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.SM3.GetByteLength">
            <summary>
            摘要应用其压缩功能的内部缓冲区的大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.ProcessWord(System.Byte[],System.Int32)">
            <summary>
            处理消息摘要
            ABCDEFGH 串联
            </summary>
            <param name="input"></param>
            <param name="inOff"></param>
        </member>
        <member name="M:Wlniao.Crypto.SM3.ProcessBlock">
            <summary>
            迭代压缩
            </summary>
        </member>
        <member name="P:Wlniao.Crypto.SM3.AlgorithmName">
            <summary>
            算法名称
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.SM3.GetDigestSize">
            <summary>
            消息摘要生成的摘要的大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.IntToBigEndian(System.Int32,System.Byte[],System.Int32)">
            <summary>
            写入到大端
            </summary>
            <param name="n"></param>
            <param name="bs"></param>
            <param name="off"></param>
        </member>
        <member name="M:Wlniao.Crypto.SM3.DoFinal(System.Byte[],System.Int32)">
            <summary>
            关闭摘要，产生最终的摘要值。doFinal调用使摘要复位。
            </summary>
            <param name="output"></param>
            <param name="outOff"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.DoFinal">
            <summary>
            关闭摘要，产生最终的摘要值。doFinal调用使摘要复位。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.Rotate(System.Int32,System.Int32)">
            <summary>
            x循环左移n比特运算
            </summary>
            <param name="x"></param>
            <param name="n"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.P0(System.Int32)">
            <summary>
            置换函数P0
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.P1(System.Int32)">
            <summary>
            置换函数P1
            </summary>
            <param name="x"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.FFOne(System.Int32,System.Int32,System.Int32)">
            <summary>
            0到15的布尔函数FF (X⊕^Y⊕Z)
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.FFSecond(System.Int32,System.Int32,System.Int32)">
            <summary>
            16到63的布尔函数FF
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.GGOne(System.Int32,System.Int32,System.Int32)">
            <summary>
            0到15的布尔函数GG
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM3.GGSecond(System.Int32,System.Int32,System.Int32)">
            <summary>
            16到63的布尔函数GG
            </summary>
            <param name="X"></param>
            <param name="Y"></param>
            <param name="Z"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Crypto.SM4">
            <summary>
            SM4对称加密算法
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM4.SM4_ENCRYPT">
            <summary>
            加密模式
            </summary>
        </member>
        <member name="F:Wlniao.Crypto.SM4.SM4_DECRYPT">
            <summary>
            解密模式
            </summary>
        </member>
        <member name="M:Wlniao.Crypto.SM4.SWAP(System.Int64[],System.Int32)">
            <summary>
            使用一个32位的数组完成加密/解密密钥的交换
            </summary>
            <param name="sk"></param>
            <param name="i"></param>
        </member>
        <member name="M:Wlniao.Crypto.SM4.EncryptECB(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="plainBytes"></param>
            <param name="keyBytes"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM4.DecryptECB(System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="encryBytes"></param>
            <param name="keyBytes"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM4.EncryptCBC(System.Byte[],System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="plainBytes"></param>
            <param name="keyBytes"></param>
            <param name="ivBytes"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Crypto.SM4.DecryptCBC(System.Byte[],System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            
            </summary>
            <param name="encryBytes"></param>
            <param name="keyBytes"></param>
            <param name="ivBytes"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Data.DataPage`1">
            <summary>
            数据分页模型
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="P:Wlniao.Data.DataPage`1.RecordCount">
            <summary>
            总记录数
            </summary>
        </member>
        <member name="P:Wlniao.Data.DataPage`1.PageCount">
            <summary>
            总页码
            </summary>
        </member>
        <member name="P:Wlniao.Data.DataPage`1.PageSize">
            <summary>
            每页数据量
            </summary>
        </member>
        <member name="P:Wlniao.Data.DataPage`1.PageIndex">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:Wlniao.Data.DataPage`1.Results">
            <summary>
            查询结果：对象的列表
            </summary>
        </member>
        <member name="M:Wlniao.Data.DataPage`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Data.DataPage`1.#ctor(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:Wlniao.Data.DataPage`1.GetEmpty(System.Int32)">
            <summary>
            返回空的分页结果集
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Data.DataPage`1.GetPage(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="list"></param>
            <param name="pageSize"></param>
            <param name="pageIndex"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Data.Pager`1">
            <summary>
            数据分页工具
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Wlniao.Data.Pager`1.skip">
            <summary>
            跳过的记录数量
            </summary>
        </member>
        <member name="P:Wlniao.Data.Pager`1.index">
            <summary>
            当前页码（将在下一个大版本中取消，已改名为page）
            </summary>
        </member>
        <member name="P:Wlniao.Data.Pager`1.page">
            <summary>
            当前页码（从1开始）
            </summary>
        </member>
        <member name="P:Wlniao.Data.Pager`1.size">
            <summary>
            分页大小
            </summary>
        </member>
        <member name="P:Wlniao.Data.Pager`1.total">
            <summary>
            结果总数
            </summary>
        </member>
        <member name="P:Wlniao.Data.Pager`1.rows">
            <summary>
            结果集
            </summary>
        </member>
        <member name="P:Wlniao.Data.Pager`1.message">
            <summary>
            消息输出
            </summary>
        </member>
        <member name="M:Wlniao.Data.Pager`1.PutIn(System.Collections.Generic.List{`0},System.Int32,System.Int32)">
            <summary>
            将原始数据进行分页
            </summary>
            <param name="source"></param>
            <param name="page"></param>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Data.Pager`1.Format(System.Collections.Generic.List{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            将数据转为分页格式
            </summary>
            <param name="Data"></param>
            <param name="Total"></param>
            <param name="Page"></param>
            <param name="Size"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.DateTools">
            <summary>
            常用的时间操作处理方法
            </summary>
        </member>
        <member name="P:Wlniao.DateTools.TimeZone">
            <summary>
            当前运行的时区
            </summary>
        </member>
        <member name="M:Wlniao.DateTools.GetUnix">
            <summary>
            获取Unix时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.GetUnix(System.String)">
            <summary>
            获取Unix时间戳
            </summary>
            <param name="strtime"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.GetUnix(System.DateTime)">
            <summary>
            获取Unix时间戳
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.GetNow">
            <summary>
            获取无时区的当前时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.Convert(System.Int64)">
            <summary>
            将Unix时间戳转换为无时区的时间（可通过WLN_TIMEZONE设置）
            </summary>
            <param name="unixtime"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.Convert(System.String)">
            <summary>
            将时间字符串转换为无时区的时间
            </summary>
            <param name="strtime"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.ConvertToUtc(System.Int64)">
            <summary>
            将Unix时间戳转换为UTC世界协调时间
            </summary>
            <param name="unixtime"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.ConvertToUtc(System.String)">
            <summary>
            将时间字符串转换为UTC世界协调时间
            </summary>
            <param name="strtime"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.ConvertToGMT(System.Int64)">
            <summary>
            将Unix时间戳转换成GMT格式
            </summary>
            <param name="unixtime"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.ConvertGmtToUtc(System.String)">
            <summary>
            将GMT格式转换为UTC世界协调时间
            </summary>
            <param name="gmt"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.Format(System.String)">
            <summary>
            将时间按指定格式输出（可通过WLN_TIMEZONE设置）
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.Format(System.DateTime,System.String)">
            <summary>
            将时间按指定格式输出（可通过WLN_TIMEZONE设置）
            </summary>
            <param name="time"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.FormatUtc(System.String)">
            <summary>
            将当前UTC时间按指定格式输出
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.FormatLocal(System.String)">
            <summary>
            格式输出本地时间
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.FormatTimeZone(System.Int32,System.String)">
            <summary>
            格式输出指定时区的时间
            </summary>
            <param name="timezone"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.FormatUnix(System.Int64,System.String)">
            <summary>
            将Unix时间戳按指定格式输出（可通过WLN_TIMEZONE设置）
            </summary>
            <param name="unixtime"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.FormatUnixToUtc(System.Int64,System.String)">
            <summary>
            将Unix时间戳按UTC协调时及指定格式输出
            </summary>
            <param name="unixtime"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.FormatUnixToLocal(System.Int64,System.String)">
            <summary>
            将Unix时间戳按本地时间及指定格式输出
            </summary>
            <param name="unixtime"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.FormatUnixToTimeZone(System.Int64,System.Int32,System.String)">
            <summary>
            将Unix时间戳按指定时区及格式输出
            </summary>
            <param name="timezone"></param>
            <param name="unixtime"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.FormatDate(System.String)">
            <summary>
            将当前日期按指定格式输出（可通过WLN_TIMEZONE设置）
            </summary>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.GetDayStart(System.Int64)">
            <summary>
            获取当日起始时间（可通过WLN_TIMEZONE设置）
            </summary>
            <param name="unixtime"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.GetDayOfWeek">
            <summary>
            获取一周中的某天
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.GetDayOfWeek(System.Int64)">
            <summary>
            获取一周中的某天
            </summary>
            <param name="unixtime"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DateTools.GetUtcDayStart(System.Int64)">
            <summary>
            获取当日起始时间
            </summary>
            <param name="unixtime"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Encryptor">
            <summary>
            HASH算法加密工具类
            </summary>
        </member>
        <member name="M:Wlniao.Encryptor.Md5Encryptor32(System.String,System.Int32)">
            <summary>
            32位MD5算法加密（多次加密）
            </summary>
            <param name="str">需要加密的字符串</param>
            <param name="time">需要加密的次数</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Wlniao.Encryptor.Md5Encryptor32(System.String)">
            <summary>
            32位MD5算法加密（大写）
            </summary>
            <param name="str">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Wlniao.Encryptor.Md5Encryptor16(System.String)">
            <summary>
            16位MD5算法加密
            </summary>
            <param name="str">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Wlniao.Encryptor.HmacSHA256Encryptor(System.String,System.String)">
            <summary>
             HmacSHA256算法加密
            </summary>
            <param name="str"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.Base64Encrypt(System.String)">
            <summary>
            Base64编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.Base64Decrypt(System.String)">
            <summary>
            Base64解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.VerbatimQuery(System.String,System.Int32)">
            <summary>
            逐字编码查询条件
            </summary>
            <param name="txt"></param>
            <param name="crypt"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.VerbatimEncrypt(System.String,System.Int32)">
            <summary>
            逐字编码文本内容
            </summary>
            <param name="txt"></param>
            <param name="crypt"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.VerbatimDecrypt(System.String,System.Int32)">
            <summary>
            逐字解码文本内容
            </summary>
            <param name="txt"></param>
            <param name="crypt"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.AesEncrypt(System.String,System.String,System.String)">
            <summary>
            加密函数
            </summary>
            <param name="pToEncrypt">需要加密的字符串</param>
            <param name="sKey">加密密钥</param>
            <param name="sIV">偏移量</param>
            <returns>返回加密后的密文</returns>
        </member>
        <member name="M:Wlniao.Encryptor.AesDecrypt(System.String,System.String,System.String)">
            <summary>
            解密函数
            </summary>
            <param name="pToDecrypt">需要解密的字符串</param>
            <param name="sKey">加密密钥</param>
            <param name="sIV">偏移量</param>
            <returns>返回加密前的明文</returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM2EncryptByPublicKey(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="plainText"></param>
            <param name="publickey"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM2DecryptByPrivateKey(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="encryText"></param>
            <param name="privatekey"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM4EncryptECBToHex(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="plainText"></param>
            <param name="secretKey"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM4EncryptECBToBase64(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="plainText"></param>
            <param name="secretKey"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM4DecryptECBFromHex(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="encryText"></param>
            <param name="secretKey"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM4DecryptECBFromBase64(System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="encryText"></param>
            <param name="secretKey"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM4EncryptCBCToHex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="plainText"></param>
            <param name="secretKey"></param>
            <param name="iv"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM4EncryptCBCToBase64(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="plainText"></param>
            <param name="secretKey"></param>
            <param name="iv"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM4DecryptCBCFromHex(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="encryText"></param>
            <param name="secretKey"></param>
            <param name="iv"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM4DecryptCBCFromBase64(System.String,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="encryText"></param>
            <param name="secretKey"></param>
            <param name="iv"></param>
            <param name="isPadding"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.SM3Encrypt(System.String)">
            <summary>
            获取SM3值
            </summary>
            <param name="str">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <member name="M:Wlniao.Encryptor.GetSHA1(System.String)">
            <summary>
            获取SHA1值
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.GetHMACSHA1(System.String,System.String)">
            <summary>
            HMACMD5加密
            </summary>
            <param name="str"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Encryptor.GetHMACSHA1String(System.String,System.String)">
            <summary>
            HMACMD5加密
            </summary>
            <param name="str"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Convert">
            <summary>
            常用类型转换方法
            </summary>
        </member>
        <member name="M:Wlniao.Convert.IsDecimal(System.String)">
            <summary>
            判断字符串是否是小数或整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.IsIdListValid(System.String)">
            <summary>
            判断字符串是否是多个整数的列表，整数之间必须通过英文逗号分隔
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.IsInt(System.String)">
            <summary>
            判断字符串是否是整数或负整数
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.IsBool(System.String)">
            <summary>
            判断字符串是否是"true"或"false"(不区分大小写)
            </summary>
            <param name="str"></param>
            <returns>只有字符串是"true"或"false"(不区分大小写)时，才返回true</returns>
        </member>
        <member name="M:Wlniao.Convert.To(System.Object,System.Type)">
            <summary>
            将对象转换成目标类型
            </summary>
            <param name="val"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToBool(System.Int32)">
            <summary>
            将整数转换成 Boolean 类型。只有参数等于1时，才返回true
            </summary>
            <param name="integer"></param>
            <returns>只有参数等于1时，才返回true</returns>
        </member>
        <member name="M:Wlniao.Convert.ToBool(System.Object)">
            <summary>
            将对象转换成 Boolean 类型。只有对象的字符串形式等于1或者true(不区分大小写)时，才返回true
            </summary>
            <param name="objBool"></param>
            <returns>只有对象的字符串形式等于1或者true(不区分大小写)时，才返回true</returns>
        </member>
        <member name="M:Wlniao.Convert.ToBool(System.String)">
            <summary>
            将字符串(不区分大小写)转换成 Boolean 类型。只有字符串等于1或者true时，才返回true
            </summary>
            <param name="str"></param>
            <returns>只有字符串等于1或者true时，才返回true</returns>
        </member>
        <member name="M:Wlniao.Convert.ToDecimal(System.String)">
            <summary>
            将字符串转换成 System.Decimal 类型。如果str不是整数或小数，返回0
            </summary>
            <param name="str"></param>
            <returns>如果str不是整数或小数，返回0</returns>
        </member>
        <member name="M:Wlniao.Convert.ToDouble(System.String)">
            <summary>
            将字符串转换成 System.Double 类型。如果str不是整数或小数，返回0
            </summary>
            <param name="str"></param>
            <returns>如果str不是整数或小数，返回0</returns>
        </member>
        <member name="M:Wlniao.Convert.ToDecimal(System.String,System.Decimal)">
            <summary>
            将字符串转换成 System.Decimal 类型。如果str不是整数或小数，返回参数 defaultValue 指定的值
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToFloat(System.String,System.Single)">
            <summary>
            将字符串转换成 float 类型。如果str不是整数或小数，返回参数 defaultValue 指定的值
            </summary>
            <param name="str"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToLong(System.Object)">
            <summary>
            将对象转换成长整数；如果不是长整数，则返回0
            </summary>
            <param name="objLong"></param>
            <returns>如果不是长整数，则返回0</returns>
        </member>
        <member name="M:Wlniao.Convert.ToLong(System.String)">
            <summary>
            将对象转换成长整数；如果不是长整数，则返回0
            </summary>
            <param name="strLong"></param>
            <returns>如果不是长整数，则返回0</returns>
        </member>
        <member name="M:Wlniao.Convert.ToInt(System.Object)">
            <summary>
            将对象转换成整数；如果不是整数，则返回0
            </summary>
            <param name="objInt"></param>
            <returns>如果不是整数，则返回0</returns>
        </member>
        <member name="M:Wlniao.Convert.ToInt(System.Single)">
            <summary>
            将 float 转换成整数
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToInt(System.Double)">
            <summary>
            将 double 转换成整数
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToInt(System.Decimal)">
            <summary>
            将 decimal 转换成整数
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToHex(System.Int64,System.String)">
            <summary>
            将10进制整数转换为n进制
            </summary>
            <param name="inputNum">10进制整数</param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.DeHex(System.String,System.String)">
            <summary>
            将n进制转换为10进制整数
            </summary>
            <param name="str">需要转换的n进制数</param>
            <param name="chars"></param>
            <returns>10进制整数</returns>
        </member>
        <member name="M:Wlniao.Convert.IntToHex(System.Int32,System.Int32)">
            <summary>
            十进制数转换成二、八、十六进制数
            </summary>
            <param name="int_value">十进制数</param>
            <param name="mod">进制</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.Int64ToHex(System.Int64,System.Int32)">
            <summary>
            十进制数转换成二、八、十六进制数
            </summary>
            <param name="int_value">十进制数</param>
            <param name="mod">进制</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.HexToInt(System.Char)">
            <summary>
            
            </summary>
            <param name="h"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.IntToHex26(System.Int64)">
            <summary>
            10进制转换成26进制（26大写字母）
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.Hex26ToInt(System.String)">
            <summary>
            26进制转换成10进制
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.Hex26ToInt64(System.String)">
            <summary>
            26进制转换成10进制
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.IntToHex52(System.Int64)">
            <summary>
            10进制转换成52进制（52个英文字母）
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.Hex52ToInt(System.String)">
            <summary>
            52进制转换成10进制
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.Hex52ToInt64(System.String)">
            <summary>
            52进制转换成10进制
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.IPv4ToIPv6(System.String)">
            <summary>
            IPv4地址转换为IPv6格式
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToNotNull(System.Object)">
            <summary>
            将对象转换成非Null形式，如果传入的参数是 null，则返回空字符串(即""，也即string.Empty)
            </summary>
            <param name="str"></param>
            <returns>如果为null，则返回空字符串(即""，也即string.Empty)</returns>
        </member>
        <member name="M:Wlniao.Convert.ToTime(System.Object)">
            <summary>
            将对象转换成 DateTime 形式，如果不符合格式，则返回当前时间
            </summary>
            <param name="objTime"></param>
            <returns>如果不符合格式，则返回当前时间</returns>
        </member>
        <member name="M:Wlniao.Convert.ToTime(System.Object,System.DateTime)">
            <summary>
            将对象转换成 DateTime 形式，如果不符合格式，则返回第二个参数指定的时间
            </summary>
            <param name="objTime"></param>
            <param name="targetTime"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.IsDayEqual(System.DateTime,System.DateTime)">
            <summary>
            判断两个时间的日期是否相同(要求同年同月同日)
            </summary>
            <param name="day1"></param>
            <param name="day2"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToDayString(System.DateTime)">
            <summary>
            获取日期的日常表达形式，要求最近三天依次用 {今天，昨天，前天} 表示
            </summary>
            <param name="day"></param>
            <returns>要求最近三天依次用 {今天、昨天、前天} 表示</returns>
        </member>
        <member name="M:Wlniao.Convert.ToTimeString(System.DateTime)">
            <summary>
            获取时间的日常表达形式，格式为 {**小时前，**分钟前，**秒前}，以及 {昨天，前天}
            </summary>
            <param name="t"></param>
            <returns>格式为 {**小时前，**分钟前，**秒前}，以及 {昨天，前天}</returns>
        </member>
        <member name="M:Wlniao.Convert.ToDateEnString(System.DateTime)">
            <summary>
            获取时间的英文表达形式，格式如 {Monday, November 12, 2012}
            </summary>
            <param name="t"></param>
            <returns>格式如 {Monday, November 12, 2012}</returns>
        </member>
        <member name="M:Wlniao.Convert.ToDateEnShortString(System.DateTime)">
            <summary>
            获取时间的英文表达形式，格式如 {Apr 07,2012}
            </summary>
            <param name="t"></param>
            <returns>格式如 {Apr 07,2012}</returns>
        </member>
        <member name="M:Wlniao.Convert.ToDateEnLongString(System.DateTime)">
            <summary>
            获取时间的英文表达形式，格式如 {Mon, 12 Nov 2012 00:00:00 GMT}
            </summary>
            <param name="t"></param>
            <returns>格式如 {Mon, 12 Nov 2012 00:00:00 GMT}</returns>
        </member>
        <member name="M:Wlniao.Convert.ToString(System.Int32[])">
            <summary>
            将整数转换成字符串形式，多个整数之间用英文逗号分隔
            </summary>
            <param name="ids"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToDictionary(System.String)">
            <summary>
            将文本转换为数据字典
            </summary>
            <param name="doc"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToIntArray(System.String)">
            <summary>
            将字符串形式的 id 列表转换成整型数组
            </summary>
            <param name="myids"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToColorValue(System.String)">
            <summary>
            将字符串转换成以井号开头的表达形式；如果不是有效的颜色值，则返回null
            </summary>
            <param name="val"></param>
            <returns>将字符串转换成以井号开头的表达形式；如果不是有效的颜色值，则返回null</returns>
        </member>
        <member name="M:Wlniao.Convert.ToBytes(System.IO.Stream)">
            <summary>
            将 Stream 转成 byte[]
            </summary>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToStream(System.Byte[])">
            <summary>
            将 byte[] 转成 Stream
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToByteArray(System.SByte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.SByte"/> 字符数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sbyteArray">要转换的 <see cref="T:System.SByte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:Wlniao.Convert.ToByteArray(System.String)">
            <summary>
            将此实例中的指定字符串转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="sourceString">要转换的字符串</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:Wlniao.Convert.ToByteArray(System.Object[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Object"/> 数组转换到 <see cref="T:System.Byte"/> 字符数组。
            </summary>
            <param name="tempObjectArray">要转换的 <see cref="T:System.Object"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.Byte"/> 字符数组</returns>
        </member>
        <member name="M:Wlniao.Convert.ToSByteArray(System.Byte[])">
            <summary>
            将此实例中的指定 <see cref="T:System.Byte"/> 字符数组转换到 <see cref="T:System.SByte"/> 字符数组。
            </summary>
            <param name="byteArray">要转换的 <see cref="T:System.Byte"/> 字符数组</param>
            <returns>返回转换后的 <see cref="T:System.SByte"/> 字符数组</returns>
        </member>
        <member name="M:Wlniao.Convert.HexStringToBytes(System.String)">
            <summary>
            字符串转16进制字节数组
            </summary>
            <param name="hexString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.BytesToHexString(System.Byte[])">
            <summary>
            byte[]数组转16进制字符串
            </summary>
            <param name="input">byte[]数组</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:Wlniao.Convert.ToMoney(System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="money"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToMoney(System.Double,System.String)">
            <summary>
            
            </summary>
            <param name="money"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToMoney(System.Decimal,System.String)">
            <summary>
            
            </summary>
            <param name="money"></param>
            <param name="format"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.ToSvgStr(System.String)">
            <summary>
            将远程Svg图片转换成Svg格式的字符串（可转换Url参数）
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Convert.Identity(System.Int64)">
            <summary>
            根据不同进制的写法返回对应数值
            </summary>
            <param name="literal">各进制写法</param>
            <returns>对应数值</returns>
        </member>
        <member name="M:Wlniao.Convert.Identity(System.UInt64)">
            <summary>
            根据不同进制的写法返回对应数值
            </summary>
            <param name="literal">各进制写法</param>
            <returns>对应数值</returns>
        </member>
        <member name="M:Wlniao.Convert.Identity(System.Single)">
            <summary>
            根据不同进制的写法返回对应数值
            </summary>
            <param name="literal">各进制写法</param>
            <returns>对应数值</returns>
        </member>
        <member name="M:Wlniao.Convert.Identity(System.Double)">
            <summary>
            根据不同进制的写法返回对应数值
            </summary>
            <param name="literal">各进制写法</param>
            <returns>对应数值</returns>
        </member>
        <member name="T:Wlniao.DbConnectInfo">
            <summary>
            数据库链接信息
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR_TYPE">
            <summary>
            数据库连接类型 默认：sqlite/mysql
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR_HOST">
            <summary>
            连接的数据库服务器地址（默认为127.0.0.1）
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR_NAME">
            <summary>
            连接的数据库名称
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR_UID">
            <summary>
            连接数据库的用户账号
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR_PWD">
            <summary>
            连接数据库的用户密码
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR_READONLY">
            <summary>
            MySql数据库连接字符串
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR_MYSQL">
            <summary>
            MySql数据库连接字符串
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR_SQLITE">
            <summary>
            Sqlite数据库连接字符串
            </summary>
        </member>
        <member name="P:Wlniao.DbConnectInfo.WLN_CONNSTR_SQLSERVER">
            <summary>
            SqlServer数据库连接字符串
            </summary>
        </member>
        <member name="T:Wlniao.GeoTool">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.GeoTool.Direction">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.GeoTool.Direction.Top">
            <summary>
            上
            </summary>
        </member>
        <member name="F:Wlniao.GeoTool.Direction.Right">
            <summary>
            右
            </summary>
        </member>
        <member name="F:Wlniao.GeoTool.Direction.Bottom">
            <summary>
            下
            </summary>
        </member>
        <member name="F:Wlniao.GeoTool.Direction.Left">
            <summary>
            左
            </summary>
        </member>
        <member name="M:Wlniao.GeoTool.CalculateAdjacent(System.String,Wlniao.GeoTool.Direction)">
            <summary>
            计算相邻
            </summary>
            <param name="hash"></param>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.GeoTool.RefineInterval(System.Double[]@,System.Int32,System.Int32)">
            <summary>
            细化间隔
            </summary>
            <param name="interval"></param>
            <param name="cd"></param>
            <param name="mask"></param>
        </member>
        <member name="M:Wlniao.GeoTool.Decode(System.String)">
            <summary>
            解码
            </summary>
            <param name="geohash"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.GeoTool.Encode(System.Double,System.Double,System.Int32)">
            <summary>
            编码
            </summary>
            <param name="latitude">纬度</param>
            <param name="longitude">经度</param>
            <param name="precision">精度误差：1,2500km 2,630km; 3,78km; 4,20kmm; 5,2.4km; 6,610m; 7,76m; 8,19m; 9,2m; </param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.GeoTool.GetGeoHashExpand(System.String)">
            <summary>
            获取九个格子 顺序 本身 上、下、左、右、 左上、 右上、 左下、右下
            </summary>
            <param name="geohash"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.GeoTool.Rad(System.Double)">
            <summary>
            经纬度转化成弧度
            </summary>
            <param name="d">经纬度</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.GeoTool.GetDistance(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            计算两点位置的距离，返回两点的距离，单位米
            </summary>
            <param name="lat1">第一点纬度</param>
            <param name="lng1">第一点经度</param>
            <param name="lat2">第二点纬度</param>
            <param name="lng2">第二点经度</param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.DictionaryExtend">
            <summary>
            Dictionary组扩展
            </summary>
        </member>
        <member name="M:Wlniao.DictionaryExtend.TryAdd(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wlniao.DictionaryExtend.TryAdd(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wlniao.DictionaryExtend.PutValue(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wlniao.DictionaryExtend.PutValue(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetString(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetValue(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="dic"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetValue``1(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,``0)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="Default"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetString(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetDecimal(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Decimal)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetDecimal(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Decimal)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetDouble(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetDouble(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetFloat(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetFloat(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Double)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetInt64(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetInt64(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int64)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetInt32(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetInt32(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetBoolean(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.DictionaryExtend.GetBoolean(System.Collections.Generic.Dictionary{System.String,System.Object},System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dic"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.EnumExtend">
            <summary>
            枚举类型功能扩展类
            </summary>
        </member>
        <member name="M:Wlniao.EnumExtend.GetDescription(System.Enum,System.Boolean)">
            <summary>
            获得枚举的Description
            </summary>
            <param name="value">枚举值</param>
            <param name="nameInstead">当枚举值没有定义DescriptionAttribute，是否使用枚举名代替，默认是使用</param>
            <returns>枚举的Description</returns>
        </member>
        <member name="T:Wlniao.ExpressionExtend">
            <summary>
            谓词表达式构建器
            </summary>
        </member>
        <member name="M:Wlniao.ExpressionExtend.True``1">
            <summary>
            创建一个值恒为 <c>true</c> 的表达式。
            </summary>
            <typeparam name="T">表达式方法类型</typeparam>
            <returns>一个值恒为 <c>true</c> 的表达式。</returns>
        </member>
        <member name="M:Wlniao.ExpressionExtend.False``1">
            <summary>
            创建一个值恒为 <c>false</c> 的表达式。
            </summary>
            <typeparam name="T">表达式方法类型</typeparam>
            <returns>一个值恒为 <c>false</c> 的表达式。</returns>
        </member>
        <member name="M:Wlniao.ExpressionExtend.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            双元 Or 表达式
            </summary>
            <typeparam name="T">指定泛型 T</typeparam>
            <param name="exprleft">左表达式</param>
            <param name="exprright">右表达式</param>
            <returns>返回合并表达式</returns>
        </member>
        <member name="M:Wlniao.ExpressionExtend.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            双元 And 表达式
            </summary>
            <typeparam name="T">指定泛型 T</typeparam>
            <param name="exprleft">左表达式</param>
            <param name="exprright">右表达式</param>
            <returns>返回合并表达式</returns>
        </member>
        <member name="M:Wlniao.ExpressionExtend.QueryableOrder``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            单一条件排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="order"></param>
            <param name="sortby"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.ExpressionExtend.GetOrderQuery``1(System.Linq.IQueryable{``0},System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            多条件组合排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.ExpressionExtend.GetOrderQuery``1(System.Linq.IQueryable{``0},System.String,System.String)">
            <summary>
            单条件排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="query"></param>
            <param name="PropertyName"></param>
            <param name="AscOrDesc"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.ExpressionList`1">
            <summary>
            条件过滤类
            </summary>
            <typeparam name="TEntity"></typeparam>
        </member>
        <member name="M:Wlniao.ExpressionList`1.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.ExpressionList`1.Add(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            添加到集合
            </summary>
            <param name="predicate"></param>
        </member>
        <member name="M:Wlniao.ExpressionList`1.AddForOr(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Or操作添加到集合
            </summary>
            <param name="exprleft"></param>
            <param name="exprright"></param>
        </member>
        <member name="M:Wlniao.ExpressionList`1.AddForAnd(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            And操作添加到集合
            </summary>
            <param name="exprleft"></param>
            <param name="exprright"></param>
        </member>
        <member name="M:Wlniao.ExpressionList`1.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wlniao.IEnumerableExtend">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.IEnumerableExtend.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            按指定字段排序
            </summary>
            <typeparam name="TSource"></typeparam>
            <typeparam name="TKey"></typeparam>
            <param name="source"></param>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.MimeMapping">
            <summary>
            获取MIME
            </summary>
        </member>
        <member name="M:Wlniao.MimeMapping.GetMimeMapping(System.String)">
            <summary>
            获取文件MIME类型
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.MimeMapping.AddMapping(System.String,System.String)">
            <summary>
            添加新的MiniType映射
            </summary>
            <param name="extName"></param>
            <param name="typeName"></param>
        </member>
        <member name="T:Wlniao.StringExtend">
            <summary>
            String类常用方法扩展
            </summary>
        </member>
        <member name="M:Wlniao.StringExtend.IsNullOrEmpty(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.StringExtend.IsNotNullAndEmpty(System.String)">
            <summary>
            是否不为空
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.StringExtend.IsMobile(System.String)">
            <summary>
            是否为手机号
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.StringExtend.IsEmail(System.String)">
            <summary>
            是否为邮箱地址
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.StringExtend.SplitBy(System.String)">
            <summary>
            分割字符串（不包含空字符串）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.StringExtend.SplitBy(System.String,System.String[])">
            <summary>
            分割字符串（不包含空字符串）
            </summary>
            <param name="input"></param>
            <param name="separator">用指定字符分割</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.StringExtend.RemoveBOM(System.String)">
            <summary>
            移除字符串中的BOM（UTF）
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.SwithCaseExtend">
            <summary>
            switch/case组扩展
            </summary>
        </member>
        <member name="T:Wlniao.SwithCaseExtend.SwithCase`2">
            <summary>
            
            </summary>
            <typeparam name="TCase"></typeparam>
            <typeparam name="TOther"></typeparam>
        </member>
        <member name="M:Wlniao.SwithCaseExtend.SwithCase`2.#ctor(`0,System.Action{`1})">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="action"></param>
        </member>
        <member name="P:Wlniao.SwithCaseExtend.SwithCase`2.Value">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.SwithCaseExtend.SwithCase`2.Action">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.SwithCaseExtend.Switch``2(``0,System.Action{``1})">
            <summary>
            
            </summary>
            <typeparam name="TCase"></typeparam>
            <typeparam name="TOther"></typeparam>
            <param name="t"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.SwithCaseExtend.Switch``3(``0,System.Func{``0,``1},System.Action{``2})">
            <summary>
            
            </summary>
            <typeparam name="TInput"></typeparam>
            <typeparam name="TCase"></typeparam>
            <typeparam name="TOther"></typeparam>
            <param name="t"></param>
            <param name="selector"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.SwithCaseExtend.Case``2(Wlniao.SwithCaseExtend.SwithCase{``0,``1},``0,``1)">
            <summary>
            
            </summary>
            <typeparam name="TCase"></typeparam>
            <typeparam name="TOther"></typeparam>
            <param name="sc"></param>
            <param name="option"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.SwithCaseExtend.Case``2(Wlniao.SwithCaseExtend.SwithCase{``0,``1},``0,``1,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TCase"></typeparam>
            <typeparam name="TOther"></typeparam>
            <param name="sc"></param>
            <param name="option"></param>
            <param name="other"></param>
            <param name="bBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.SwithCaseExtend.Case``2(Wlniao.SwithCaseExtend.SwithCase{``0,``1},System.Predicate{``0},``1)">
            <summary>
            
            </summary>
            <typeparam name="TCase"></typeparam>
            <typeparam name="TOther"></typeparam>
            <param name="sc"></param>
            <param name="predict"></param>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.SwithCaseExtend.Case``2(Wlniao.SwithCaseExtend.SwithCase{``0,``1},System.Predicate{``0},``1,System.Boolean)">
            <summary>
            
            </summary>
            <typeparam name="TCase"></typeparam>
            <typeparam name="TOther"></typeparam>
            <param name="sc"></param>
            <param name="predict"></param>
            <param name="other"></param>
            <param name="bBreak"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.SwithCaseExtend.Default``2(Wlniao.SwithCaseExtend.SwithCase{``0,``1},``1)">
            <summary>
            
            </summary>
            <typeparam name="TCase"></typeparam>
            <typeparam name="TOther"></typeparam>
            <param name="sc"></param>
            <param name="other"></param>
        </member>
        <member name="T:Wlniao.Handler.Context">
            <summary>
            WlniaoHandler统一上下文接口
            </summary>
        </member>
        <member name="P:Wlniao.Handler.Context.Method">
            <summary>
            请求方式 GET/POST
            </summary>
        </member>
        <member name="P:Wlniao.Handler.Context.ApiHost">
            <summary>
            接口域名
            </summary>
        </member>
        <member name="P:Wlniao.Handler.Context.ApiPath">
            <summary>
            接口路径
            </summary>
        </member>
        <member name="P:Wlniao.Handler.Context.RequestBody">
            <summary>
            请求内容
            </summary>
        </member>
        <member name="P:Wlniao.Handler.Context.ResponseBody">
            <summary>
            输出内容
            </summary>
        </member>
        <member name="F:Wlniao.Handler.Context.ContentType">
            <summary>
            接口数据内容格式
            </summary>
        </member>
        <member name="F:Wlniao.Handler.Context.HttpRequestHeaders">
            <summary>
            请求的Headers参数
            </summary>
        </member>
        <member name="F:Wlniao.Handler.Context.HttpResponseHeaders">
            <summary>
            输出的Headers参数
            </summary>
        </member>
        <member name="F:Wlniao.Handler.Context.Encoding">
            <summary>
            接口数据编码格式
            </summary>
        </member>
        <member name="F:Wlniao.Handler.Context.Certificate">
            <summary>
            请求使用的证书
            </summary>
        </member>
        <member name="F:Wlniao.Handler.Context.Result">
            <summary>
            返回结果
            </summary>
        </member>
        <member name="M:Wlniao.Handler.Context.Handle">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Handler.ErrorResponse">
            <summary>
            错误输出内容
            </summary>
        </member>
        <member name="T:Wlniao.Handler.IClient">
            <summary>
            WlniaoHandler统一客户端约束
            </summary>
        </member>
        <member name="T:Wlniao.Handler.IContext">
            <summary>
            WlniaoHandler统一上下文接口
            </summary>
        </member>
        <member name="P:Wlniao.Handler.IContext.Method">
            <summary>
            请求方式 GET/POST
            </summary>
        </member>
        <member name="P:Wlniao.Handler.IContext.ApiPath">
            <summary>
            接口路径
            </summary>
        </member>
        <member name="P:Wlniao.Handler.IContext.RequestBody">
            <summary>
            请求内容
            </summary>
        </member>
        <member name="P:Wlniao.Handler.IContext.ResponseBody">
            <summary>
            输出内容
            </summary>
        </member>
        <member name="T:Wlniao.Handler.IRequest">
            <summary>
            WlniaoHandler统一请求约束
            </summary>
        </member>
        <member name="T:Wlniao.Handler.IResponse">
            <summary>
            WlniaoHandler统一输出约束
            </summary>
        </member>
        <member name="T:Wlniao.Handler.ObjectResponse`1">
            <summary>
            对象输出内容
            </summary>
        </member>
        <member name="T:Wlniao.Handler.PipelineHandler">
            <summary>
            WlniaoHandler管道处理
            </summary>
        </member>
        <member name="P:Wlniao.Handler.PipelineHandler.inner">
            <summary>
            管道PipelineHandler实例
            </summary>
        </member>
        <member name="M:Wlniao.Handler.PipelineHandler.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Handler.PipelineHandler.#ctor(Wlniao.Handler.PipelineHandler)">
            <summary>
            内部传递的Handler实例
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Wlniao.Handler.PipelineHandler.HandleBefore(Wlniao.Handler.IContext)">
            <summary>
            执行前调用
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="M:Wlniao.Handler.PipelineHandler.HandleAfter(Wlniao.Handler.IContext)">
            <summary>
            执行后调用
            </summary>
            <param name="ctx"></param>
        </member>
        <member name="T:Wlniao.Handler.StringResponse">
            <summary>
            文本输出内容
            </summary>
        </member>
        <member name="T:Wlniao.Http">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Http.ListenPort">
            <summary>
            监听的端口
            </summary>
        </member>
        <member name="P:Wlniao.Http.Handler">
            <summary>
            请求处理程序
            </summary>
        </member>
        <member name="T:Wlniao.Http.Context">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Http.Context.Time">
            <summary>  
            请求时间
            </summary>  
        </member>
        <member name="F:Wlniao.Http.Context.StatusCode">
            <summary>  
            响应状态
            </summary> 
        </member>
        <member name="P:Wlniao.Http.Context.Path">
            <summary>  
            请求路径
            </summary>  
        </member>
        <member name="P:Wlniao.Http.Context.Query">
            <summary>  
            请求参数
            </summary>  
        </member>
        <member name="P:Wlniao.Http.Context.Method">
            <summary>  
            请求方式
            </summary>  
        </member>
        <member name="P:Wlniao.Http.Context.Request">
            <summary>  
            请求内容
            </summary>  
        </member>
        <member name="P:Wlniao.Http.Context.Response">
            <summary>  
            输出内容
            </summary>  
        </member>
        <member name="P:Wlniao.Http.Context.AuthToken">
            <summary>  
            身份令牌
            </summary>  
        </member>
        <member name="P:Wlniao.Http.Context.ContentType">
            <summary>  
            输出格式
            </summary>  
        </member>
        <member name="M:Wlniao.Http.#ctor(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Http.Start">
            <summary>  
            启动服务
            </summary>  
        </member>
        <member name="T:Wlniao.IO.Base64Encoder">
            <summary>
            Base64编码类
            将byte[]类型转换成Base64编码的string类型。
            </summary>
        </member>
        <member name="F:Wlniao.IO.Base64Encoder.Encoder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.IO.Base64Encoder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.IO.Base64Encoder.init(System.Byte[])">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Wlniao.IO.Base64Encoder.GetEncoded(System.Byte[])">
            <summary>
            
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.IO.Base64Decoder">
            <summary>
            Base64解码类
            将Base64编码的string类型转换成byte[]类型
            </summary>
        </member>
        <member name="F:Wlniao.IO.Base64Decoder.Decoder">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.IO.Base64Decoder.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.IO.Base64Decoder.init(System.Char[])">
            <summary>
            
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:Wlniao.IO.Base64Decoder.GetDecoded(System.String)">
            <summary>
            
            </summary>
            <param name="strInput"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.IO.Base64Decoder.char2sixbit(System.Char)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.IO.Base64Default">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.IO.Base64Default.Encoder(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.IO.Base64Default.EncoderByte(System.Byte[])">
            <summary>
            
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.IO.Base64Default.Decoder(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.IO.Base64Default.DecoderByte(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.IO.FileEx">
            <summary>
            文件常用操作方法
            </summary>
        </member>
        <member name="M:Wlniao.IO.FileEx.GetEncoding(System.String)">
            <summary>
            获取文件编码格式
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.ReadByte(System.String)">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.WriteByte(System.String,System.Byte[])">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="buffer"></param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.WriteStream(System.String,System.IO.Stream)">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="stream"></param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.Read(System.String)">
            <summary>
            读取文件的内容(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.Read(System.String,System.Text.Encoding)">
            <summary>
            以某种编码方式，读取文件的内容
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="encoding">编码方式</param>
            <returns>文件的内容</returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.ReadUTF8String(System.String)">
            <summary>
            以UTF-8编码读取文件为字符串（其它编码自动转换）
            </summary>
            <param name="absolutePath"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.ReadAllLines(System.String)">
            <summary>
            读取文件各行内容(采用UTF8编码)，以数组形式返回
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns>文件各行内容</returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.ReadAllLines(System.String,System.Text.Encoding)">
            <summary>
            以某种编码方式，读取文件各行内容(采用UTF8编码)，以数组形式返回
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="encoding">编码方式</param>
            <returns>文件各行内容</returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.Write(System.String,System.String)">
            <summary>
            将字符串写入某个文件中(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要写入文件的字符串</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Write(System.String,System.String,System.Boolean)">
            <summary>
            将字符串写入某个文件中(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要写入文件的字符串</param>
            <param name="autoCreateDir">是否自动创建目录</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Write(System.String,System.String,System.Text.Encoding)">
            <summary>
            将字符串写入某个文件中(需要指定文件编码方式)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要写入文件的字符串</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Exists(System.String)">
            <summary>
            判断文件是否存在
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.IO.FileEx.Move(System.String,System.String)">
            <summary>
            移动文件
            </summary>
            <param name="sourceFileName">原来的路径</param>
            <param name="destFileName">需要挪到的新路径</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Copy(System.String,System.String)">
            <summary>
            拷贝文件(如果目标存在，不覆盖)
            </summary>
            <param name="sourceFileName">原来的路径</param>
            <param name="destFileName">需要挪到的新路径</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Copy(System.String,System.String,System.Boolean)">
            <summary>
            拷贝文件
            </summary>
            <param name="sourceFileName">原来的路径</param>
            <param name="destFileName">需要挪到的新路径</param>
            <param name="overwrite">如果目标存在，是否覆盖</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Append(System.String,System.String)">
            <summary>
            将内容追加到文件中(采用UTF8编码)
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要追加的内容</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Append(System.String,System.String,System.Text.Encoding)">
            <summary>
            将内容追加到文件中
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="fileContent">需要追加的内容</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Zip(System.String)">
            <summary>
            使用ZIP格式压缩文件（未实现）
            </summary>
            <param name="sourceFileName">压缩的文件名</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.Zip(System.String,System.String)">
            <summary>
            使用ZIP格式压缩文件（未实现）
            </summary>
            <param name="sourceFileName">压缩的文件名</param>
            <param name="destFileName">压缩后输出的文件名</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.UnZip(System.String)">
            <summary>
            解包ZIP压缩文件（未实现）
            </summary>
            <param name="sourceFileName">需要解包的ZIP文件名</param>
        </member>
        <member name="M:Wlniao.IO.FileEx.UnZip(System.String,System.String)">
            <summary>
            解包ZIP压缩文件（未实现）
            </summary>
            <param name="sourceFileName">需要解包的ZIP文件名</param>
            <param name="destFilePath">接包后的文件输出路径</param>
        </member>
        <member name="T:Wlniao.IO.IdentifyEncoding">
            <summary>
            检测字符编码的类
            <seealso cref="T:System.Byte">字节数组</seealso>
            <seealso cref="T:System.SByte">字节数组</seealso>
            <seealso cref="T:System.String">文件路径</seealso>
            </summary>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.GetEncodingName(System.String)">
            <summary>
            从指定的 <see cref="T:System.String"/> 文件路径中判断编码类型
            </summary>
            <param name="absolutePath">要判断的 <see cref="T:System.String"/> 文件路径</param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.GetEncodingName(System.Byte[])">
            <summary>
            从指定的 <see cref="T:System.Byte"/> 字节数组中判断编码类型
            </summary>
            <param name="buffer">要判断的 <see cref="T:System.Byte"/> 字节数组</param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.GetEncodingName(System.SByte[])">
            <summary>
            从指定的 <see cref="T:System.SByte"/> 字节数组中判断编码类型
            </summary>
            <param name="buffer">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回编码类型("GB2312", "GBK", "HZ", "Big5", "CNS 11643", "ISO 2022CN", "UTF-8", "Unicode", "ASCII", "OTHER")</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.GB2312Probability(System.Int32[][],System.SByte[])">
            <summary>
            判断是GB2312编码的可能性
            </summary>
            <param name="GBFreq"></param>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.GBKProbability(System.Int32[][],System.Int32[][],System.SByte[])">
            <summary>
            判断是GBK编码的可能性
            </summary>
            <param name="GBFreq"></param>
            <param name="GBKFreq"></param>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.HZProbability(System.Int32[][],System.SByte[])">
            <summary>
            判断是HZ编码的可能性
            </summary>
            <param name="GBFreq"></param>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.BIG5Probability(System.Int32[][],System.SByte[])">
            <summary>
            判断是BIG5编码的可能性
            </summary>
            <param name="Big5Freq"></param>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.ENCTWProbability(System.Int32[][],System.SByte[])">
            <summary>
            判断是CNS11643(台湾)编码的可能性
            </summary>
            <param name="EUC_TWFreq"></param>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.ISO2022CNProbability(System.Int32[][],System.Int32[][],System.SByte[])">
            <summary>
            判断是ISO2022CN编码的可能性
            </summary>
            <param name="GBFreq"></param>
            <param name="EUC_TWFreq"></param>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.UTF8Probability(System.SByte[])">
            <summary>
            判断是UTF8编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.UnicodeProbability(System.SByte[])">
            <summary>
            判断是Unicode编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="M:Wlniao.IO.IdentifyEncoding.ASCIIProbability(System.SByte[])">
            <summary>
            判断是ASCII编码的可能性
            </summary>
            <param name="rawtext">要判断的 <see cref="T:System.SByte"/> 字节数组</param>
            <returns>返回 0 至 100 之间的可能性</returns>
        </member>
        <member name="T:Wlniao.IO.PathTool">
            <summary>
            路径辅助工具
            </summary>
        </member>
        <member name="M:Wlniao.IO.PathTool.JoinPath(System.String,System.String)">
            <summary>
            自动根据系统追加一级目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.IO.PathTool.Map(System.String)">
            <summary>
            将相对路径转换为绝对路径
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.IO.PathTool.Map(System.String[])">
            <summary>
            将相对路径转换为绝对路径
            </summary>
            <param name="relativePath">必须是相对路径</param>
            <returns>返回绝对路径</returns>
        </member>
        <member name="T:Wlniao.Log.ConsoleLoger">
            <summary>
            控制台日志工具，所有日志会被写入控制台
            </summary>
        </member>
        <member name="F:Wlniao.Log.ConsoleLoger.level">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Log.ConsoleLoger.Level">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Log.ConsoleLoger.#ctor(Wlniao.Log.LogLevel)">
            <summary>
            
            </summary>
            <param name="level"></param>
        </member>
        <member name="M:Wlniao.Log.ConsoleLoger.Debug(System.String)">
            <summary>
            输出Debug级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ConsoleLoger.Info(System.String)">
            <summary>
            输出Info级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ConsoleLoger.Warn(System.String)">
            <summary>
            输出Warn级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ConsoleLoger.Error(System.String)">
            <summary>
            输出Error级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ConsoleLoger.Fatal(System.String)">
            <summary>
            输出Fatal级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ConsoleLoger.Topic(System.String,System.String)">
            <summary>
            输出日志
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
        </member>
        <member name="T:Wlniao.Log.FileLoger">
            <summary>
            文件日志工具，所有日志会被写入本地文件
            </summary>
        </member>
        <member name="F:Wlniao.Log.FileLoger.level">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Log.FileLoger.Level">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Log.FileLoger.#ctor(Wlniao.Log.LogLevel,System.String)">
            <summary>
            
            </summary>
            <param name="level"></param>
            <param name="path"></param>
        </member>
        <member name="M:Wlniao.Log.FileLoger.Debug(System.String)">
            <summary>
            输出Debug级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.FileLoger.Info(System.String)">
            <summary>
            输出Info级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.FileLoger.Warn(System.String)">
            <summary>
            输出Warn级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.FileLoger.Error(System.String)">
            <summary>
            输出Error级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.FileLoger.Fatal(System.String)">
            <summary>
            输出Fatal级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.FileLoger.Topic(System.String,System.String)">
            <summary>
            输出日志
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.FileLoger.Write(System.String,System.String)">
            <summary>
            输出日志
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
        </member>
        <member name="T:Wlniao.Log.ILogProvider">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Log.ILogProvider.Level">
            <summary>
            日志输出级别
            </summary>
        </member>
        <member name="M:Wlniao.Log.ILogProvider.Debug(System.String)">
            <summary>
            输出Debug级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ILogProvider.Info(System.String)">
            <summary>
            输出Info级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ILogProvider.Warn(System.String)">
            <summary>
            输出Warn级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ILogProvider.Error(System.String)">
            <summary>
            输出Error级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ILogProvider.Fatal(System.String)">
            <summary>
            输出Fatal级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.ILogProvider.Topic(System.String,System.String)">
            <summary>
            输出自定义主题的日志
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
        </member>
        <member name="T:Wlniao.Log.Loger">
            <summary>
            通用日志输出工具类
            </summary>
        </member>
        <member name="F:Wlniao.Log.Loger.logLevel">
            <summary>
            当前日志输出等级，None为未设定，会根据配置文件进行初始化
            </summary>
        </member>
        <member name="F:Wlniao.Log.Loger.logProvider">
            <summary>
            当前日志输出工具
            </summary>
        </member>
        <member name="F:Wlniao.Log.Loger.fileProvider">
            <summary>
            文件日志输出工具
            </summary>
        </member>
        <member name="P:Wlniao.Log.Loger.LogLevel">
            <summary>
            当前日志输出等级
            </summary>
        </member>
        <member name="P:Wlniao.Log.Loger.LogProvider">
            <summary>
            当前日志输出工具
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Log.Loger.SetLogger(Wlniao.Log.ILogProvider)">
            <summary>
            设置日志提供工具
            </summary>
            <param name="provider"></param>
        </member>
        <member name="M:Wlniao.Log.Loger.Console(System.String,System.ConsoleColor)">
            <summary>
            直接在控制台打印内容
            </summary>
            <param name="message"></param>
            <param name="color"></param>
        </member>
        <member name="M:Wlniao.Log.Loger.File(System.String,System.String,System.ConsoleColor)">
            <summary>
            直接在文件及控制台中输出日志
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
            <param name="color"></param>
        </member>
        <member name="M:Wlniao.Log.Loger.Debug(System.String)">
            <summary>
            输出Debug级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.Loger.Info(System.String)">
            <summary>
            输出Info级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.Loger.Warn(System.String)">
            <summary>
            输出Warn级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.Loger.Error(System.String)">
            <summary>
            输出Error级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.Loger.Fatal(System.String)">
            <summary>
            输出Fatal级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.Loger.Topic(System.String,System.String)">
            <summary>
            输出自定义主题的日志
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
        </member>
        <member name="T:Wlniao.Log.LogLevel">
            <summary>
            日志的等级
            Fatal>>Error>>Warn>>Debug(SQL)>>Info>>None
            </summary>
        </member>
        <member name="F:Wlniao.Log.LogLevel.None">
            <summary>
            无等级
            </summary>
        </member>
        <member name="F:Wlniao.Log.LogLevel.Debug">
            <summary>
            调试信息日志
            </summary>
        </member>
        <member name="F:Wlniao.Log.LogLevel.Information">
            <summary>
            普通信息日志
            </summary>
        </member>
        <member name="F:Wlniao.Log.LogLevel.Warning">
            <summary>
            警告信息日志
            </summary>
        </member>
        <member name="F:Wlniao.Log.LogLevel.Error">
            <summary>
            错误信息日志
            </summary>
        </member>
        <member name="F:Wlniao.Log.LogLevel.Critical">
            <summary>
            崩溃信息日志
            </summary>
        </member>
        <member name="T:Wlniao.Log.LokiLoger">
            <summary>
            基于Loki服务的日志写入工具
            </summary>
        </member>
        <member name="F:Wlniao.Log.LokiLoger.serverHost">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="F:Wlniao.Log.LokiLoger.queue">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Log.LokiLoger.level">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Log.LokiLoger.Level">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Log.LokiLoger.Interval">
            <summary>
            落盘时间间隔
            </summary>
        </member>
        <member name="F:Wlniao.Log.LokiLoger.LogLocal">
            <summary>
            本地日志输出方式
            </summary>
        </member>
        <member name="M:Wlniao.Log.LokiLoger.#ctor(Wlniao.Log.LogLevel,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="level">日志输出级别</param>
            <param name="server">服务器地址</param>
            <param name="interval">落盘时间间隔（秒）</param>
        </member>
        <member name="M:Wlniao.Log.LokiLoger.Debug(System.String)">
            <summary>
            输出Debug级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.LokiLoger.Info(System.String)">
            <summary>
            输出Info级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.LokiLoger.Warn(System.String)">
            <summary>
            输出Warn级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.LokiLoger.Error(System.String)">
            <summary>
            输出Error级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.LokiLoger.Fatal(System.String)">
            <summary>
            输出Fatal级别的日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Log.LokiLoger.Topic(System.String,System.String)">
            <summary>
            输出日志
            </summary>
            <param name="topic"></param>
            <param name="message"></param>
        </member>
        <member name="T:Wlniao.Log.LokiLoger.Entrie">
            <summary>
            日志主体
            </summary>
        </member>
        <member name="P:Wlniao.Log.LokiLoger.Entrie.time">
            <summary>
            日志时间
            </summary>
        </member>
        <member name="P:Wlniao.Log.LokiLoger.Entrie.line">
            <summary>
            日志行
            </summary>
        </member>
        <member name="P:Wlniao.Log.LokiLoger.Entrie.ts">
            <summary>
            RFC3339Nano格式时间
            </summary>
        </member>
        <member name="M:Wlniao.Log.LokiLoger.Write(System.String,Wlniao.Log.LokiLoger.Entrie,System.Boolean)">
            <summary>
            输出日志
            </summary>
            <param name="topic"></param>
            <param name="entrie"></param>
            <param name="push">是否立即回写</param>
        </member>
        <member name="T:Wlniao.Cache">
            <summary>
            缓存管理
            </summary>
        </member>
        <member name="T:Wlniao.WlniaoConsole">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.WlniaoConsole.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.WlniaoConsole.#ctor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:Wlniao.WlniaoConsole.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="TotalCount"></param>
        </member>
        <member name="M:Wlniao.WlniaoConsole.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="TotalCount"></param>
        </member>
        <member name="M:Wlniao.WlniaoConsole.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="TotalCount"></param>
        </member>
        <member name="M:Wlniao.WlniaoConsole.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="TotalCount"></param>
        </member>
        <member name="T:Wlniao.cvt">
            <summary>
            封装了反射的常用操作方法
            </summary>
        </member>
        <member name="T:Wlniao.File">
            <summary>
            封装了文件常用操作方法
            </summary>
        </member>
        <member name="T:Wlniao.Json">
            <summary>
            Json序列化、反序列化工具
            </summary>
        </member>
        <member name="T:Wlniao.Lang2">
            <summary>
            语言包工具，用于加载多国语言
            </summary>
        </member>
        <member name="T:Wlniao.log">
            <summary>
            日志输出工具
            </summary>
        </member>
        <member name="T:Wlniao.rft2">
            <summary>
            封装了反射的常用操作方法
            </summary>
        </member>
        <member name="T:Wlniao.strUtil">
            <summary>
            字符串操作工具类
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord">
            <summary>
            This is base class for DNS records.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord.#ctor(System.String,Wlniao.Net.Dns.DnsRecordType,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="recordType">Record type (A,MX, ...).</param>
            <param name="ttl">TTL (time to live) value in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord.Name">
            <summary>
            Gets DNS domain name that owns a resource record.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord.RecordType">
            <summary>
            Gets record type (A,MX,...).
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord.TTL">
            <summary>
            Gets TTL (time to live) value in seconds.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecordType">
            <summary>
            DNS记录类型
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.A">
            <summary>
            IPv4 host address
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.NS">
            <summary>
            An authoritative name server.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.CNAME">
            <summary>
            The canonical name for an alias.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.SOA">
            <summary>
            Marks the start of a zone of authority.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.PTR">
            <summary>
            A domain name pointer.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.HINFO">
            <summary>
            Host information.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.MINFO">
            <summary>
            Mailbox or mail list information.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.MX">
            <summary>
            Mail exchange.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.TXT">
            <summary>
            Text strings.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.AAAA">
            <summary>
            IPv6 host address.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.SRV">
            <summary>
            SRV record specifies the location of services.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.NAPTR">
            <summary>
            NAPTR(Naming Authority Pointer) record.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.SPF">
            <summary>
            SPF(Sender Policy Framework) record.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.DnsRecordType.ANY">
            <summary>
            All records what server returns.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_A">
            <summary>
            A record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_A.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="ip">IP address.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_A.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_A.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_AAAA">
            <summary>
            AAAA record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_AAAA.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="ip">IP address.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_AAAA.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_AAAA.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_CNAME">
            <summary>
            CNAME record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_CNAME.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="alias">Alias.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_CNAME.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_CNAME.Alias">
            <summary>
            Gets alias.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_HINFO">
            <summary>
            HINFO record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_HINFO.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="cpu">Host CPU.</param>
            <param name="os">Host OS.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_HINFO.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_HINFO.CPU">
            <summary>
            Gets host's CPU.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_HINFO.OS">
            <summary>
            Gets host's OS.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_MX">
            <summary>
            MX record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_MX.#ctor(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="preference">MX record preference.</param>
            <param name="host">Mail host dns name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_MX.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_MX.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type. 
            </summary>
            <param name="obj">An object to compare with this instance. </param>
            <returns>Returns 0 if two objects are equal, returns negative value if this object is less,
            returns positive value if this object is grater.</returns>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_MX.Preference">
            <summary>
            Gets MX record preference. The lower number is the higher priority server.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_MX.Host">
            <summary>
            Gets mail host dns name.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_NAPTR">
            <summary>
            NAPTR record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_NAPTR.#ctor(System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="order">Oorder in which the NAPTR records MUST be processed.</param>
            <param name="preference">Order in which NAPTR records with equal Order values SHOULD be processed.</param>
            <param name="flags">Flags which control the rewriting and interpretation of the fields in the record.</param>
            <param name="services">Services related to this record.</param>
            <param name="regexp">Regular expression that is applied to the original string.</param>
            <param name="replacement">Regular expressions replacement value.</param>
            <param name="ttl">Time to live value in seconds.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_NAPTR.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_NAPTR.Order">
            <summary>
            Gets order in which the NAPTR records MUST be processed in order to accurately 
            represent the ordered list of Rules.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_NAPTR.Preference">
            <summary>
            Gets the order in which NAPTR records with equal Order values SHOULD be processed, 
            low numbers being processed before high numbers.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_NAPTR.Flags">
            <summary>
            Gets flags which control the rewriting and interpretation of the fields in the record.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_NAPTR.Services">
            <summary>
            Gets services related to this record. Known values can be get from: http://www.iana.org/assignments/enum-services.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_NAPTR.Regexp">
            <summary>
            Gets regular expression that is applied to the original string held by the client in order to 
            construct the next domain name to lookup.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_NAPTR.Replacement">
            <summary>
            Gets regular expressions replacement value.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_NS">
            <summary>
            NS record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_NS.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="nameServer">Name server name.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_NS.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_NS.NameServer">
            <summary>
            Gets name server name.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_PTR">
            <summary>
            PTR record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_PTR.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="ip">IP address.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_PTR.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_PTR.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_SOA">
            <summary>
            SOA record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_SOA.#ctor(System.String,System.Net.IPAddress,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="ip">IP address.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_SOA.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_SOA.IP">
            <summary>
            Gets host IP address.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_SPF">
            <summary>
            SPF record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_SPF.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="text">SPF text.</param>
            <param name="ttl">TTL (time to live) value in seconds.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_SPF.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_SPF.Text">
            <summary>
            Gets text.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_SRV">
            <summary>
            SRV record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_SRV.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="priority">Service priority.</param>
            <param name="weight">Weight value.</param>
            <param name="port">Service port.</param>
            <param name="target">Service provider host name or IP address.</param>
            <param name="ttl">Time to live value in seconds.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_SRV.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_SRV.Priority">
            <summary>
            Gets service priority. Lowest value means greater priority.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_SRV.Weight">
            <summary>
            Gets weight. The weight field specifies a relative weight for entries with the same priority. 
            Larger weights SHOULD be given a proportionately higher probability of being selected.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_SRV.Port">
            <summary>
            Port where service runs.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_SRV.Target">
            <summary>
            Service provider host name or IP address.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsRecord_TXT">
            <summary>
            TXT record class.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_TXT.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Default constructor.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="text">Text.</param>
            <param name="ttl">TTL value.</param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsRecord_TXT.Parse(System.String,System.Byte[],System.Int32@,System.Int32,System.Int32)">
            <summary>
            Parses resource record from reply data.
            </summary>
            <param name="name">DNS domain name that owns a resource record.</param>
            <param name="reply">DNS server reply data.</param>
            <param name="offset">Current offset in reply data.</param>
            <param name="rdLength">Resource record data length.</param>
            <param name="ttl">Time to live in seconds.</param>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsRecord_TXT.Text">
            <summary>
            Gets text.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsServerResponse">
            <summary>
            This class represents dns server response.
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetARecords">
            <summary>
            Gets IPv4 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetAAAARecords">
            <summary>
            Gets IPv6 host addess records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetNSRecords">
            <summary>
            Gets name server records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetCNAMERecords">
            <summary>
            Gets CNAME records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetMXRecords">
            <summary>
            Gets MX records.(MX records are sorted by preference, lower array element is prefered)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetTXTRecords">
            <summary>
            Gets text records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetSOARecords">
            <summary>
            Gets SOA records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetPTRRecords">
            <summary>
            Gets PTR records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetHINFORecords">
            <summary>
            Gets HINFO records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetSRVRecords">
            <summary>
            Gets SRV resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetNAPTRRecords">
            <summary>
            Gets NAPTR resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.GetSPFRecords">
            <summary>
            Gets SPF resource records.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsServerResponse.FilterRecordsX(System.Collections.Generic.List{Wlniao.Net.Dns.DnsRecord},Wlniao.Net.Dns.DnsRecordType)">
            <summary>
            Filters out specified type of records from answer.
            </summary>
            <param name="answers"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsServerResponse.ConnectionOk">
            <summary>
            Gets if connection to dns server was successful.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsServerResponse.ID">
            <summary>
            Gets DNS transaction ID.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsServerResponse.ResponseCode">
            <summary>
            Gets dns server response code.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsServerResponse.AllAnswers">
            <summary>
            Gets all resource records returned by server (answer records section + authority records section + additional records section). 
            NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsServerResponse.Answers">
            <summary>
            Gets dns server returned answers. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
            <code>
            // NOTE: DNS server may return diffrent record types even if you query MX.
            //       For example you query lumisoft.ee MX and server may response:	
            //		 1) MX - mail.lumisoft.ee
            //		 2) A  - lumisoft.ee
            // 
            //       Before casting to right record type, see what type record is !
            			
            
            foreach(DnsRecordBase record in Answers){
            	// MX record, cast it to MX_Record
            	if(record.RecordType == QTYPE.MX){
            		MX_Record mx = (MX_Record)record;
            	}
            }
            </code>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsServerResponse.AuthoritiveAnswers">
            <summary>
            Gets name server resource records in the authority records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="P:Wlniao.Net.Dns.DnsServerResponse.AdditionalAnswers">
            <summary>
            Gets resource records in the additional records section. NOTE: Before using this property ensure that ConnectionOk=true and ResponseCode=RCODE.NO_ERROR.
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.DnsTool">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.#ctor(System.Net.IPAddress[])">
            <summary>
            
            </summary>
            <param name="ServerIPs"></param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="ServerIPorHost"></param>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.GetIPAddressDefault(System.String)">
            <summary>
            
            </summary>
            <param name="qname"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.GetIPAddress(System.String)">
            <summary>
            
            </summary>
            <param name="qname"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.GetCNAME(System.String)">
            <summary>
            
            </summary>
            <param name="qname"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.GetTXT(System.String)">
            <summary>
            
            </summary>
            <param name="qname"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.GetResponse(System.String,Wlniao.Net.Dns.DnsRecordType)">
            <summary>
            获取服务器输出
            </summary>
            <param name="qname">记录名称</param>
            <param name="type">Query type</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.CreateQuery(System.Byte[],System.Int32,System.String,Wlniao.Net.Dns.DnsRecordType,System.Int32)">
            <summary>
            Creates binary query.
            </summary>
            <param name="buffer">Buffer where to store query.</param>
            <param name="ID">Query ID.</param>
            <param name="qname">Query text.</param>
            <param name="qtype">Query type.</param>
            <param name="qclass">Query class.</param>
            <returns>Returns number of bytes stored to <b>buffer</b>.</returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.ParseQuery(System.Byte[])">
            <summary>
            Parses query.
            </summary>
            <param name="reply">Dns server reply.</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.ParseAnswers(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Parses specified count of answers from query.
            </summary>
            <param name="reply">Server returned query.</param>
            <param name="answerCount">Number of answers to parse.</param>
            <param name="offset">Position from where to start parsing answers.</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.Dns.DnsTool.ReadCharacterString(System.Byte[],System.Int32@)">
            <summary>
            Reads character-string from spefcified data and offset.
            </summary>
            <param name="data">Data from where to read.</param>
            <param name="offset">Offset from where to start reading.</param>
            <returns>Returns readed string.</returns>
        </member>
        <member name="T:Wlniao.Net.Dns.OpCode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.OpCode.QUERY">
            <summary>
            标准查询
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.OpCode.IQUERY">
            <summary>
            反向查询
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.OpCode.STATUS">
            <summary>
            服务器状态查询
            </summary>
        </member>
        <member name="T:Wlniao.Net.Dns.ResponceCode">
            <summary>
            This class holds DNS server responce code. Defined in RFC 1035.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.ResponceCode.NO_ERROR">
            <summary>
            No error condition.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.ResponceCode.FORMAT_ERRROR">
            <summary>
            Format error - The name server was unable to interpret the query.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.ResponceCode.SERVER_FAILURE">
            <summary>
            Server failure - The name server was unable to process this query due to a problem with the name server.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.ResponceCode.NAME_ERROR">
            <summary>
            Name Error - Meaningful only for responses from an authoritative name server, this code signifies that the
            domain name referenced in the query does not exist.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.ResponceCode.NOT_IMPLEMENTED">
            <summary>
            Not Implemented - The name server does not support the requested kind of query.
            </summary>
        </member>
        <member name="F:Wlniao.Net.Dns.ResponceCode.REFUSED">
            <summary>
            Refused - The name server refuses to perform the specified operation for policy reasons.
            </summary>
        </member>
        <member name="T:Wlniao.Net.RedisClient">
            <summary>
            Redis客户端
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.SelectDB">
            <summary>
            当前选中的数据库
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.Username">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.Password">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.Encoding">
            <summary>
            数据处理编码
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.NoDelaySocket">
            <summary>
            Socket 是否正在使用 Nagle 算法。
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.SocketList">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.EndPointList">
            <summary>
            连接终结点集合
            </summary>
        </member>
        <member name="M:Wlniao.Net.RedisClient.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Net.RedisClient.#ctor(System.Net.EndPoint)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="M:Wlniao.Net.RedisClient.#ctor(System.Net.EndPoint,System.String)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="password"></param>
        </member>
        <member name="M:Wlniao.Net.RedisClient.#ctor(System.Net.EndPoint,System.String,System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
            <param name="username"></param>
            <param name="password"></param>
            <param name="nagle"></param>
        </member>
        <member name="M:Wlniao.Net.RedisClient.AddEndPoint(System.Net.EndPoint)">
            <summary>
            
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="M:Wlniao.Net.RedisClient.Get(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.RedisClient.Set(System.String,System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="expire"></param>
        </member>
        <member name="M:Wlniao.Net.RedisClient.KeyDelete(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Wlniao.Net.RedisClient.KeyExists(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Wlniao.Net.RedisClient.RedisCommand">
            <summary>
            Redis命令
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Auth">
            <summary>
            简单密码认证
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Quit">
            <summary>
            关闭当前连接
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Select">
            <summary>
            切换到指定的数据库
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Info">
            <summary>
            Redis信息
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Set">
            <summary>
            添加或更新一个值
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Del">
            <summary>
            删除键
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Get">
            <summary>
            获取一个key的值
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Keys">
            <summary>
            查询键
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Exists">
            <summary>
            确认一个key是否存在
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Expire">
            <summary>
            设置过期时间
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Multi">
            <summary>
            标记一个事务块开始
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Exec">
            <summary>
            执行所有 MULTI 之后发的命令
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.Save">
            <summary>
            将数据同步保存到磁盘
            </summary>
        </member>
        <member name="F:Wlniao.Net.RedisClient.RedisCommand.BgSave">
            <summary>
            将数据异步保存到磁盘
            </summary>
        </member>
        <member name="M:Wlniao.Net.RedisClient.GetSocket">
            <summary>
            从连接池获取一个实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.RedisClient.Multi(Wlniao.Net.WlnSocket)">
            <summary>
            创建事务
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Wlniao.Net.RedisClient.Exec(Wlniao.Net.WlnSocket)">
            <summary>
            执行事务
            </summary>
            <param name="socket"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.RedisClient.SetByPipeline(Wlniao.Net.WlnSocket,System.Byte[],System.Byte[],System.Int32)">
            <summary>
            
            </summary>
            <param name="socket"></param>
            <param name="key"></param>
            <param name="value"></param>
            <param name="second"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.RedisClient.AddCommand(Wlniao.Net.WlnSocket,Wlniao.Net.RedisClient.RedisCommand,System.Byte[][])">
            <summary>
            添加命令
            </summary>
            <param name="socket"></param>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.RedisClient.SendCommand(Wlniao.Net.WlnSocket,Wlniao.Net.RedisClient.RedisCommand,System.Byte[][])">
            <summary>
            发送命令
            </summary>
            <param name="socket"></param>
            <param name="command"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.RedisClient.SendData(Wlniao.Net.WlnSocket,Wlniao.Net.RedisClient.RedisCommand,System.Byte[][],System.Boolean)">
            <summary>
            数据发送方法
            </summary>
            <param name="socket"></param>
            <param name="command"></param>
            <param name="args"></param>
            <param name="keepConnect"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Net.WlnSocket">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Net.WlnSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            
            </summary>
            <param name="addressFamily"></param>
            <param name="socketType"></param>
            <param name="protocolType"></param>
        </member>
        <member name="P:Wlniao.Net.WlnSocket.Catch">
            <summary>
            此链接发生了异常
            </summary>
        </member>
        <member name="P:Wlniao.Net.WlnSocket.Using">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.Net.WlnSocket.LastUse">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.Net.WlnSocket.TimeOutSeconds">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Net.WlnSocket.GetSocket(System.String,System.Int32,System.Int32)">
            <summary>
            从连接池获取一个实例
            </summary>
            <param name="host"></param>
            <param name="port"></param>
            <param name="TimeOutSeconds"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Net.WlnSocket.HttpGet(System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            通过Socket发送Http请求
            </summary>
            <param name="url"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.OpenApi.Common">
            <summary>
            XCenter OpenApi请求工具
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Common.Get(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Get请求
            </summary>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Common.Get``1(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Common.GetOnlyData(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Get请求但只返回成功后的data部分
            </summary>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Common.Post(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Post请求（字符串）
            </summary>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="postData"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Common.Post``1(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="postData"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Common.Post(System.String,System.String,System.IO.Stream,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Post请求（字节流）
            </summary>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="stream"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Common.Post``1(System.String,System.String,System.IO.Stream,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="stream"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Common.CreateUrl(System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="path"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.OpenApi.Lbs">
            <summary>
            地理位置工具
            </summary>
        </member>
        <member name="T:Wlniao.OpenApi.Lbs.SuggestionModel">
            <summary>
            地理位置建议结果
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.SuggestionModel.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.SuggestionModel.city">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.SuggestionModel.district">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.SuggestionModel.business">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.SuggestionModel.cityid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.OpenApi.Lbs.PlaceModel">
            <summary>
            附近地点结果
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.PlaceModel.name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.PlaceModel.address">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.PlaceModel.location">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.OpenApi.Lbs.Coord">
            <summary>
            经纬坐标 longitude/latitude
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.Coord.longitude">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.Coord.latitude">
            <summary>
            纬度
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.Coord.#ctor">
            <summary>
            实例化一个空坐标系
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.Coord.#ctor(System.String)">
            <summary>
            实例化一个空坐标系
            </summary>
            <param name="location">经纬度坐标（纬度在前）</param>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.Coord.#ctor(System.Double,System.Double)">
            <summary>
            实例化一个空坐标系
            </summary>
            <param name="Latitude">纬度</param>
            <param name="Longitude">经度</param>
        </member>
        <member name="T:Wlniao.OpenApi.Lbs.CoordSimple">
            <summary>
            经纬坐标 lng/lat
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.CoordSimple.lng">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.CoordSimple.lat">
            <summary>
            纬度
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.CoordSimple.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.CoordSimple.#ctor(System.Double,System.Double)">
            <summary>
            
            </summary>
            <param name="Latitude"></param>
            <param name="Longitude"></param>
        </member>
        <member name="T:Wlniao.OpenApi.Lbs.CoordDispose">
            <summary>
            坐标计算工具
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.CoordDispose.radians(System.Double)">
            <summary>
            角度数转换为弧度公式
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.CoordDispose.degrees(System.Double)">
            <summary>
            弧度转换为角度数公式
            </summary>
            <param name="d"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.CoordDispose.GetDistance(Wlniao.OpenApi.Lbs.Coord,Wlniao.OpenApi.Lbs.Coord)">
            <summary>
            计算两个经纬度之间的直接距离
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.CoordDispose.GetDistanceGoogle(Wlniao.OpenApi.Lbs.Coord,Wlniao.OpenApi.Lbs.Coord)">
            <summary>
            计算两个经纬度之间的直接距离(google 算法)
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.CoordDispose.GetDegreeCoordinates(Wlniao.OpenApi.Lbs.Coord,System.Double)">
            <summary>
            以一个经纬度为中心计算出四个顶点
            </summary>
            <param name="degree">中心坐标</param>
            <param name="distance">半径(米)</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.CoordDispose.GetCenterPoint(System.Collections.Generic.List{Wlniao.OpenApi.Lbs.Coord},System.Boolean)">
            <summary>
            计算多个点的中心点坐标
            </summary>
            <param name="degrees">半径(米)</param>
            <param name="large">大范围/小范围（400km以上/400km以内）</param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.OpenApi.Lbs.IPGis">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.IPGis.IPAddress">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.IPGis.Province">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.IPGis.CityCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.IPGis.CityName">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.IPGis.longitude">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Lbs.IPGis.latitude">
            <summary>
            纬度
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.Search(System.Double,System.Double,System.Int32,System.String)">
            <summary>
            附近位置查询接口
            </summary>
            <param name="lat">纬度</param>
            <param name="lng">经度</param>
            <param name="radius">距离</param>
            <param name="query">类型，如：银行,酒店</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.Suggestion(System.String,System.String)">
            <summary>
            地理位置建议接口
            </summary>
            <param name="key">关键字</param>
            <param name="city">限定城市范围</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.GetDistance(System.String,System.String,System.String)">
            <summary>
            获取路程距离
            </summary>
            <param name="origins"></param>
            <param name="destinations"></param>
            <param name="mode">导航模式：walking（步行）、driving（驾车）、line（直线）</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.GetAddressByPoint(System.Double,System.Double)">
            <summary>
            通过坐标获取对应地址信息
            </summary>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.GetAddressByPoint(System.String,System.String)">
            <summary>
            通过坐标获取对应地址信息
            </summary>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Lbs.GetByIP(System.String)">
            <summary>
            根据IP地址定位
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.OpenApi.Location">
            <summary>
            地理位置相关
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Location.id">
            <summary>
            LocationId
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Location.parent">
            <summary>
            上级LocationId
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Location.name">
            <summary>
            简称
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Location.tags">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Location.address">
            <summary>
            地址/全称
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Location.lng">
            <summary>
            经度
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Location.lat">
            <summary>
            纬度
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Location.distance">
            <summary>
            与指定坐标的距离
            </summary>
        </member>
        <member name="F:Wlniao.OpenApi.Location.namelist">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Location.GetName(System.String)">
            <summary>
            根据LocationId获取地点名称
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Location.Get(System.String)">
            <summary>
            通过LocationId获取地点信息
            </summary>
            <param name="Id"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Location.Get(System.String,System.String,System.Int32)">
            <summary>
            通过GPS获取最近的地址
            </summary>
            <param name="Longitude">经度</param>
            <param name="Latitude">纬度</param>
            <param name="GPSType">坐标类型 1,GPS坐标  2,百度坐标</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Location.GetList(System.String,System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            获取地点列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Location.GetList(System.String,System.Int32,System.Double,System.Double,System.Int32,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            获取地点列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Location.GetListNearBy(System.Double,System.Double,System.Int32,System.String,System.Int32)">
            <summary>
            通过GPS获取最近的地点列表
            </summary>
            <param name="Longitude"></param>
            <param name="Latitude"></param>
            <param name="GPSType"></param>
            <param name="Tag"></param>
            <param name="Count"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Location.GetTree(System.String,System.String,System.String)">
            <summary>
            获取地点列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Location.GetPath(System.String)">
            <summary>
            获取地点路径
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.OpenApi.Push">
            <summary>
            推送工具
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Push.SendEmail(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件
            </summary>
            <param name="to">收件人邮箱地址</param>
            <param name="title">邮件标题</param>
            <param name="body">邮件正文</param>
            <param name="from">发件人邮箱地址</param>
            <param name="user">发件箱登录帐号</param>
            <param name="pwd">发件箱登录密码</param>
            <param name="smtp">SMTP邮件服务器</param>
            <param name="useGet">是否使用GET方式发起请求</param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.OpenApi.Sid">
            <summary>
            调用OpenApi服务端提供的方法
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Sid.Get(System.String)">
            <summary>
            根据手机号生成Sid
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Sid.GetMobile(System.String)">
            <summary>
            根据Sid解析手机号
            </summary>
            <param name="Sid"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.OpenApi.Tool">
            <summary>
            调用OpenApi服务端提供的方法
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.GetIP">
            <summary>
            获取本机IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.GetIPv4">
            <summary>
            获取本机IPv4
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.GetIPv6">
            <summary>
            获取本机IPv6
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.GetIPv6Connected">
            <summary>
            获取本机IPv6（仅能联通的）
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.GetPinyin(System.String)">
            <summary>
            将汉字转换成拼音
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.GetChineseSpell(System.String)">
            <summary>
            将汉字转换成拼音并获取首字母
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.ConvertBaiduToGPS(System.String)">
            <summary>
            百度地图坐标转换成GPS坐标
            </summary>
            <param name="location">经纬度坐标（纬度在前）</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.ConvertBaiduToGPS(System.String,System.String)">
            <summary>
            百度地图坐标转换成GPS坐标
            </summary>
            <param name="latitude">维度</param>
            <param name="longitude">经度</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.ConvertGPSToBaiDu(System.String)">
            <summary>
            GPS转换成百度地图坐标
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.ConvertGPSToBaiDu(System.String,System.String)">
            <summary>
            GPS转换成百度地图坐标
            </summary>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.ConvertGPSToSoSo(System.String)">
            <summary>
            GPS转换成搜搜地图坐标
            </summary>
            <param name="location"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Tool.ConvertGPSToSoSo(System.String,System.String)">
            <summary>
            GPS转换成搜搜地图坐标
            </summary>
            <param name="longitude"></param>
            <param name="latitude"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.OpenApi.Wx">
            <summary>
            微信公众号接口
            </summary>
        </member>
        <member name="T:Wlniao.OpenApi.Wx.ErrMsg">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.ErrMsg.errcode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.ErrMsg.errmsg">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.ErrMsg.msgid">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.OpenApi.Wx.AccessToken">
            <summary>
            AccessToken信息
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AccessToken.access_token">
            <summary>
            /
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AccessToken.expires_in">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.OpenApi.Wx.WxTicket">
            <summary>
            AccessToken信息
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.WxTicket.ticket">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.WxTicket.expires_in">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.OpenApi.Wx.UserInfo">
            <summary>
            UserInfo信息
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.subscribe">
            <summary>
            用户是否订阅该公众号标识
            为0时，用户没有关注该公众号，拉取不到其余信息。
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.openid">
            <summary>
            用户的标识，对当前公众号唯一
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.nickname">
            <summary>
            用户昵称
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.sex">
            <summary>
            用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.province">
            <summary>
            用户个人资料填写的省份
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.city">
            <summary>
            普通用户个人资料填写的城市
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.country">
            <summary>
            国家，如中国为CN
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.language">
            <summary>
            用户的语言，简体中文为zh_CN
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.headimgurl">
            <summary>
            用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.subscribe_time">
            <summary>
            用户关注时间（时间戳），如果用户曾多次关注，则取最后关注时间
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.unionid">
            <summary>
            unionid
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.remark">
            <summary>
            公众号运营者对粉丝的备注
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.UserInfo.groupid">
            <summary>
            用户所在的分组ID
            </summary>
        </member>
        <member name="T:Wlniao.OpenApi.Wx.AuthUserInfo">
            <summary>
            UserInfo信息
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AuthUserInfo.openid">
            <summary>
            用户的唯一标识
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AuthUserInfo.nickname">
            <summary>
            用户昵称
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AuthUserInfo.sex">
            <summary>
            用户的性别，值为1时是男性，值为2时是女性，值为0时是未知
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AuthUserInfo.province">
            <summary>
            用户个人资料填写的省份
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AuthUserInfo.city">
            <summary>
            普通用户个人资料填写的城市
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AuthUserInfo.country">
            <summary>
            国家，如中国为CN
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AuthUserInfo.headimgurl">
            <summary>
            用户头像，最后一个数值代表正方形头像大小（有0、46、64、96、132数值可选，0代表640*640正方形头像），用户没有头像时该项为空。若用户更换头像，原有头像URL将失效。
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.AuthUserInfo.privilege">
            <summary>
            用户特权信息，json 数组，如微信沃卡用户为（chinaunicom）
            </summary>
        </member>
        <member name="T:Wlniao.OpenApi.Wx.TemplateData">
            <summary>
            模板消息数据
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.TemplateData.value">
            <summary>
            内容
            </summary>
        </member>
        <member name="P:Wlniao.OpenApi.Wx.TemplateData.color">
            <summary>
            显示颜色
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.TemplateData.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.TemplateData.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.TemplateData.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="color"></param>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.GetAccessToken(System.String,System.String)">
            <summary>
            获取公众号AccessToken
            </summary>
            <param name="appid"></param>
            <param name="appsecret"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.GetAccessTokenByLocal(System.String,System.String)">
            <summary>
            本地获取公众号AccessToken（无缓存）
            </summary>
            <param name="appid"></param>
            <param name="appsecret"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.GetTicketJsApi(System.String,System.String)">
            <summary>
            获取公众号GetTicketJsApi
            </summary>
            <param name="appid"></param>
            <param name="appsecret"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.GetUserInfoByOpenApi(System.String,System.String)">
            <summary>
            通过OpenApi获取用户信息
            </summary>
            <param name="appid"></param>
            <param name="wxopenid"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.GetUserInfo(System.String,System.String)">
            <summary>
            获取已关注用户的基本信息
            </summary>
            <param name="access_token"></param>
            <param name="wxopenid"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.SendTemplateMsg(System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,Wlniao.OpenApi.Wx.TemplateData})">
            <summary>
            发送模板消息
            </summary>
            <param name="access_token"></param>
            <param name="wxopenid"></param>
            <param name="template_id"></param>
            <param name="topcolor"></param>
            <param name="url"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.GetAuthUserInfoByOpenApi(System.String,System.String)">
            <summary>
            获取通过网页授权后的用户信息
            </summary>
            <param name="appid"></param>
            <param name="wxopenid"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.GetAuthUserInfo(System.String,System.String,System.String)">
            <summary>
            获取通过网页授权后的用户信息
            </summary>
            <param name="appid"></param>
            <param name="wxopenid"></param>
            <param name="access_token"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.OpenApi.Wx.GetSignatureStr(System.Collections.Generic.KeyValuePair{System.String,System.String}[],System.String)">
            <summary>
            根据参数和密码生成签名字符串
            </summary>
            <param name="kvs">API参数</param>
            <param name="verifycode">密码</param>
            <returns>签名字符串</returns>
        </member>
        <member name="T:Wlniao.Pattern.Regex">
            <summary>
            常用正则表达式的整理
            </summary>
        </member>
        <member name="M:Wlniao.Pattern.Regex.IsMatch(System.String,System.String)">
            <summary>
            检查字符串是否和指定的正则表达式匹配
            </summary>
            <param name="input">需要检查的字符串</param>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="F:Wlniao.Pattern.Regex.Url">
            <summary>
            网址的正则表达式
            </summary>
        </member>
        <member name="F:Wlniao.Pattern.Regex.Email">
            <summary>
            email 正则表达式
            </summary>
        </member>
        <member name="F:Wlniao.Pattern.Regex.Currency">
            <summary>
            货币值(小数)的正则表达式
            </summary>
        </member>
        <member name="F:Wlniao.Pattern.Regex.NegativeCurrency">
            <summary>
            (负数)货币值(小数)的正则表达式
            </summary>
        </member>
        <member name="F:Wlniao.Pattern.Regex.Img">
            <summary>
            html 页面中图片的正则表达式，获取&lt;img src="" /&gt; 的src部分
            </summary>
        </member>
        <member name="T:Wlniao.Result">
            <summary>
            对结果信息的封装(有效或错误)
            </summary>
        </member>
        <member name="M:Wlniao.Result.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Result.#ctor(System.String)">
            <summary>
            根据错误信息构建 result
            </summary>
            <param name="errorMsg"></param>
        </member>
        <member name="M:Wlniao.Result.Add(System.String)">
            <summary>
            添加错误信息
            </summary>
            <param name="errorMsg"></param>
        </member>
        <member name="P:Wlniao.Result.Info">
            <summary>
            附带的对象
            </summary>
        </member>
        <member name="P:Wlniao.Result.Error">
            <summary>
            获取错误信息列表中第一条记录，没有时返回null
            </summary>
        </member>
        <member name="P:Wlniao.Result.Errors">
            <summary>
            获取所有错误信息的列表
            </summary>
        </member>
        <member name="P:Wlniao.Result.IsValid">
            <summary>
            结果是否全部正确有效
            </summary>
        </member>
        <member name="P:Wlniao.Result.HasErrors">
            <summary>
            结果是否包含错误
            </summary>
        </member>
        <member name="M:Wlniao.Result.Join(Wlniao.Result)">
            <summary>
            合并结果信息
            </summary>
            <param name="result"></param>
        </member>
        <member name="T:Wlniao.Runtime.Console">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Runtime.Console.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Runtime.Console.#ctor(System.DateTime)">
            <summary>
            
            </summary>
            <param name="timeout"></param>
        </member>
        <member name="M:Wlniao.Runtime.Console.#ctor(System.Double)">
            <summary>
            
            </summary>
            <param name="TotalCount"></param>
        </member>
        <member name="M:Wlniao.Runtime.Console.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="TotalCount"></param>
        </member>
        <member name="M:Wlniao.Runtime.Console.#ctor(System.Int64)">
            <summary>
            
            </summary>
            <param name="TotalCount"></param>
        </member>
        <member name="M:Wlniao.Runtime.Console.#ctor(System.Single)">
            <summary>
            
            </summary>
            <param name="TotalCount"></param>
        </member>
        <member name="M:Wlniao.Runtime.Console.Write(System.Double)">
            <summary>
            
            </summary>
            <param name="FinishedCount"></param>
        </member>
        <member name="M:Wlniao.Runtime.Console.WriteLine(System.Double)">
            <summary>
            
            </summary>
            <param name="FinishedCount"></param>
        </member>
        <member name="M:Wlniao.Runtime.Console.WriteFaild(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Runtime.Console.Loading(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="tips"></param>
            <param name="newline"></param>
        </member>
        <member name="M:Wlniao.Runtime.Console.ConsoleLoading">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Runtime.Console.LoadingFinish">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.Runtime.Lang">
            <summary>
            语言包工具，用于加载多国语言
            </summary>
            <remarks>
            默认语言包文件存放在 /xcore/lang/ 中，比如 /xcore/lang/zh-cn.ini 。只要在 /xcore/lang/ 中新增一个语言包文件，则系统将其作为语言包列表自动加载。可添加的语言包名称包括：en-us,en-gb,zh-cn,zh-tw,ja,ko,fr,de,it
            </remarks>
        </member>
        <member name="M:Wlniao.Runtime.Lang.Get(System.String)">
            <summary>
            获取某 key 的语言值
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Lang.Get(System.String,System.String)">
            <summary>
            获取某 key 的语言值
            </summary>
            <param name="key"></param>
            <param name="defaultStr"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Lang.Get(System.String,System.String,System.String)">
            <summary>
            获取指定语言某 key 的值
            </summary>
            <param name="langStr"></param>
            <param name="key"></param>
            <param name="defaultStr"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Lang.GetSupportedLang">
            <summary>
            获取所有支持的语言包
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Lang.GetLang">
            <summary>
            获取当前语言字符(比如 zh-cn，或 en-us)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Lang.GetLangName(System.String)">
            <summary>
            
            </summary>
            <param name="langStr"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Runtime.Reflection">
            <summary>
            封装了反射的常用操作方法
            </summary>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetInstance(System.String)">
            <summary>
            为类型创建对象(直接指定类型的完全限定名称)
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetInstance(System.Type,System.Object[])">
            <summary>
            通过反射创建对象(Activator.CreateInstance)，并提供构造函数
            </summary>
            <param name="t"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetInstance(System.String,System.String)">
            <summary>
            为类型创建对象(通过加载指定程序集中的类型)
            </summary>
            <param name="asmName">不需要后缀名</param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetInstance(System.Reflection.Assembly,System.String)">
            <summary>
            为类型创建对象(通过加载指定程序集中的类型)
            </summary>
            <param name="asm">程序集</param>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetPropertyList(System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetPropertyValue(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="currentObject"></param>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="currentObject"></param>
            <param name="propertyName"></param>
            <param name="propertyValue"></param>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.getPropertyTypeName(System.Reflection.PropertyInfo)">
            <summary>
            获取属性的类型的fullName(对泛型名称做了特殊处理)
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.CallMethod(System.Object,System.String)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.CallMethod(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="currentType"></param>
            <param name="methodName"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.CallMethod(System.Object,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="methodName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.CallMethod(System.Type,System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="currentType"></param>
            <param name="methodName"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetMethods(System.Type)">
            <summary>
            获取 public 实例方法，不包括继承的方法
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetMethodsWithInheritance(System.Type)">
            <summary>
            获取 public 实例方法
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetAttribute(System.Type,System.Type)">
            <summary>
            
            </summary>
            <param name="t"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetAttribute(System.Reflection.MemberInfo,System.Type)">
            <summary>
            
            </summary>
            <param name="memberInfo"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetAttributes(System.Reflection.MemberInfo)">
            <summary>
            
            </summary>
            <param name="memberInfo"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.GetAttributes(System.Reflection.MemberInfo,System.Type)">
            <summary>
            
            </summary>
            <param name="memberInfo"></param>
            <param name="attributeType"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.IsBaseType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Runtime.Reflection.IsInterface(System.Type,System.Type)">
            <summary>
            判断 t 是否实现了某种接口
            </summary>
            <param name="t">需要判断的类型</param>
            <param name="interfaceType">是否实现的接口</param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Runtime.SysInfo">
            <summary>
            当前系统信息（如：OSVersion等）
            </summary>
        </member>
        <member name="P:Wlniao.Runtime.SysInfo.IsLinux">
            <summary>
            当前是否为Linux系统
            </summary>
        </member>
        <member name="P:Wlniao.Runtime.SysInfo.IsWindows">
            <summary>
            当前是否为Windows系统
            </summary>
        </member>
        <member name="P:Wlniao.Runtime.SysInfo.OSX">
            <summary>
            当前是否为OSX系统
            </summary>
        </member>
        <member name="P:Wlniao.Runtime.SysInfo.IsWeb">
            <summary>
            是否为Web应用
            </summary>
        </member>
        <member name="P:Wlniao.Runtime.SysInfo.IsConsole">
            <summary>
            是否为控制台应用
            </summary>
        </member>
        <member name="P:Wlniao.Runtime.SysInfo.IsService">
            <summary>
            是否为系统服务
            </summary>
        </member>
        <member name="P:Wlniao.Runtime.SysInfo.IsWinForm">
            <summary>
            是否为窗口程序
            </summary>
        </member>
        <member name="T:Wlniao.Runtime.XCoreException">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Runtime.XCoreException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Wlniao.Runtime.XCoreException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:Wlniao.Serialization.NotSerializeAttribute">
            <summary>
            不需要序列化的属性
            </summary>
        </member>
        <member name="T:Wlniao.Serialization.SerializableAttribute">
            <summary>
            需要序列化的属性
            </summary>
        </member>
        <member name="T:Wlniao.Serialization.Json">
            <summary>
            Json序列化、反序列化工具
            </summary>
        </member>
        <member name="M:Wlniao.Serialization.Json.GetField(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            获取键值对中某一字段的值
            </summary>
            <param name="map">键值对</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.GetFieldStr(System.Collections.Generic.Dictionary{System.String,System.Object},System.String)">
            <summary>
            获取键值对中某一字段的值
            </summary>
            <param name="map">键值对</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.GetField(System.String,System.String)">
            <summary>
            获取 json 字符串中某一字段的值
            </summary>
            <param name="oneJsonString">json 字符串</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.GetFieldStr(System.String,System.String)">
            <summary>
            获取 json 字符串中某一字段的值
            </summary>
            <param name="oneJsonString">json 字符串</param>
            <param name="field">字段名称</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.ToObject(System.String,System.Type)">
            <summary>
            将 json 字符串反序列化为对象
            </summary>
            <param name="oneJsonString">json 字符串</param>
            <param name="t">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.ToObject``1(System.String)">
            <summary>
            将 json 字符串反序列化为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">json 字符串</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.ToString(System.Object)">
            <summary>
            将对象序列化为json字符串,支持子对象的序列化
            </summary>
            <param name="obj">序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.ToString(System.Object,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            将对象序列化为json字符串,支持子对象的序列化
            </summary>
            <param name="obj">序列化的对象</param>
            <param name="kvs">序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.ToStringList(System.Collections.IList)">
            <summary>
            将对象集合序列化为json字符串,不支持子对象的序列化
            </summary>
            <param name="list">序列化的List对象</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.ToList``1(System.String)">
            <summary>
            将 json 字符串反序列化为对象列表
            </summary>
            <typeparam name="T"></typeparam>
            <param name="jsonString">json 字符串</param>
            <returns>返回对象列表</returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.DicToString(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            将字典序列化为 json 字符串
            </summary>
            <param name="dic"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.StringToDic(System.String)">
            <summary>
            将 json 字符串反序列化为字典对象
            </summary>
            <param name="JsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.StringToDicList(System.String)">
            <summary>
            将 json 字符串反序列化为字典对象的列表
            </summary>
            <param name="jsonString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.ClearStr(System.String)">
            <summary>
            去除 /* 类似的 */ 注释
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.Encode(System.String)">
            <summary>
            将引号、冒号、逗号进行编码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.Json.Decode(System.String)">
            <summary>
            将引号、冒号、逗号进行解码
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Serialization.JsonParser">
            <summary>
            Json 反序列化工具
            </summary>
        </member>
        <member name="M:Wlniao.Serialization.JsonParser.Parse(System.String)">
            <summary>
            解析字符串，返回对象。
            根据 json 的不同，可能返回整数(int)、布尔类型(bool)、字符串(string)、一般对象(Dictionary&lt;string, object&gt;)、数组(List&lt;object&gt;)等不同类型
            </summary>
            <param name="src"></param>
            <returns>根据 json 的不同，可能返回整数(int)、布尔类型(bool)、字符串(string)、一般对象(Dictionary&lt;string, object&gt;)、数组(List&lt;object&gt;)等不同类型</returns>
        </member>
        <member name="T:Wlniao.Serialization.ArrayJsonParser">
            <summary>
            集合类型的序列化
            </summary>
        </member>
        <member name="T:Wlniao.Serialization.CharSource">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.Serialization.CharSource.clearComment(System.String)">
            <summary>
            清除备注（以“//”开始的行）
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Serialization.InitJsonParser">
            <summary>
            Int类型的转换
            </summary>
        </member>
        <member name="T:Wlniao.Serialization.JsonParserBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.Serialization.StringJsonParser">
            <summary>
            字符串类型转换
            </summary>
        </member>
        <member name="T:Wlniao.Serialization.ValueJsonParser">
            <summary>
            值类型转换
            </summary>
        </member>
        <member name="T:Wlniao.Serialization.JsonString">
            <summary>
            Json 序列化工具：将对象转换成 json 字符串
            </summary>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.Convert(System.Object)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.Convert(System.Object,System.Boolean)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="reSort"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.Convert(System.Object,System.Boolean,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="reSort"></param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.Convert(System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="reSort"></param>
            <param name="isBreakline">是否换行(默认不换行)</param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ClearNewLine(System.String)">
            <summary>
            清除json字符串中的换行符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ConvertArray(System.Object[],System.Boolean,System.String)">
            <summary>
            将数组转换成 json 字符串
            </summary>
            <param name="arrObj"></param>
            <param name="reSort">是否重新排序</param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ConvertList(System.Collections.IList,System.Boolean,System.String)">
            <summary>
            将List转换成 json 字符串
            </summary>
            <param name="list"></param>
            <param name="reSort">是否重新排序</param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ConvertList(System.Collections.IList,System.Boolean,System.Boolean,System.String)">
            <summary>
            将List转换成 json 字符串
            </summary>
            <param name="list"></param>
            <param name="reSort">是否重新排序</param>
            <param name="isBreakline">是否换行(默认不换行，阅读起来更加清晰)</param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ConvertDictionary(System.Collections.IDictionary,System.Boolean,System.String)">
            <summary>
            将字典 Dictionary 转换成 json 字符串
            </summary>
            <param name="dic"></param>
            <param name="reSort">是否重新排序</param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ConvertDictionary(System.Collections.IDictionary,System.Boolean,System.Boolean,System.String)">
            <summary>
            将字典 Dictionary 转换成 json 字符串
            </summary>
            <param name="dic"></param>
            <param name="reSort">是否重新排序</param>
            <param name="isBreakline">是否换行(默认不换行)</param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ConvertObject(System.Object,System.Boolean,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="reSort">是否重新排序</param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ConvertObject(System.Object,System.Boolean,System.Boolean)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="reSort">是否重新排序</param>
            <param name="isBreakline">是否换行(默认不换行)</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ConvertObject(System.Object,System.Boolean,System.Boolean,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="reSort">是否重新排序</param>
            <param name="isBreakline">是否换行(默认不换行)</param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.JsonString.ConvertObject(System.Object,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <param name="reSort">是否重新排序</param>
            <param name="isBreakline">是否换行(默认不换行)</param>
            <param name="withQuotation">属性名是否使用引号(默认不启用)</param>
            <param name="TypeList"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Serialization.SimpleJsonString">
            <summary>
            将简单的对象转换成 json 字符串，不支持子对象的序列化
            </summary>
        </member>
        <member name="M:Wlniao.Serialization.SimpleJsonString.ConvertList(System.Collections.IList)">
            <summary>
            将对象列表转换成 json 字符串
            </summary>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Serialization.SimpleJsonString.ConvertObject(System.Object)">
            <summary>
            将对象转换成 json 字符串
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Text.Encoding">
            <summary>
            Encoding类常用方法扩展
            </summary>
        </member>
        <member name="P:Wlniao.Text.Encoding.ASCII">
            <summary>
            ASCII编码
            </summary>
        </member>
        <member name="P:Wlniao.Text.Encoding.Unicode">
            <summary>
            Unicode编码
            </summary>
        </member>
        <member name="P:Wlniao.Text.Encoding.UTF8">
            <summary>
            UTF8编码
            </summary>
        </member>
        <member name="P:Wlniao.Text.Encoding.UTF32">
            <summary>
            UTF32编码
            </summary>
        </member>
        <member name="P:Wlniao.Text.Encoding.GBK">
            <summary>
            GBK编码
            </summary>
        </member>
        <member name="P:Wlniao.Text.Encoding.GB2312">
            <summary>
            GB2312编码
            </summary>
        </member>
        <member name="M:Wlniao.Text.Encoding.GetEncoding(System.String)">
            <summary>
            根据名称返回编码
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Text.Pinyin">
            <summary>
            汉字拼音转换类
            </summary>
        </member>
        <member name="F:Wlniao.Text.Pinyin.otherChinese">
            <summary>
            二级汉字数组
            </summary>
        </member>
        <member name="F:Wlniao.Text.Pinyin.otherPinYin">
            <summary>
            二级汉字对应拼音数组
            </summary>
        </member>
        <member name="M:Wlniao.Text.Pinyin.GetFirst(System.Char)">
            <summary>
            取拼音第一个字段
            </summary>        
            <param name="ch"></param>        
            <returns></returns>        
        </member>
        <member name="M:Wlniao.Text.Pinyin.GetFirst(System.String)">
            <summary>
            取拼音第一个字段
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.Pinyin.Get(System.Char)">
            <summary>
            获取单字拼音
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.Pinyin.Get(System.String)">
            <summary>
            把汉字转换成拼音(全拼)
            </summary>
            <param name="str">汉字字符串</param>
            <returns>转换后的拼音(全拼)字符串</returns>
        </member>
        <member name="T:Wlniao.Text.StringUtil">
            <summary>
            字符串操作工具类
            </summary>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsNullOrEmpty(System.String)">
            <summary>
            检查字符串是否是 null 或者空白字符。不同于.net自带的string.IsNullOrEmpty，多个空格在这里也返回true。
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.HasText(System.String)">
            <summary>
            检查是否包含有效字符(空格等空白字符不算)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Equals(System.String,System.String)">
            <summary>
            比较两个字符串是否相等
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            比较两个字符串是否相等(不区分大小写)
            </summary>
            <param name="s1"></param>
            <param name="s2"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Append(System.String,System.String)">
            <summary>
            将 endString 附加到 srcString末尾，如果 srcString 末尾已包含 endString，则不再附加。
            </summary>
            <param name="srcString"></param>
            <param name="endString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ConverToNotNull(System.Object)">
            <summary>
            将对象转为字符串，如果对象为 null，则转为空字符串(string.Empty)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CutString(System.Object,System.Int32)">
            <summary>
            从字符串中截取指定长度的一段，如果源字符串被截取了，则结果末尾出现省略号...
            </summary>
            <param name="str">源字符串</param>
            <param name="length">需要截取的长度</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CutString(System.String,System.Int32)">
            <summary>
            从字符串中截取指定长度的一段，如果源字符串被截取了，则结果末尾出现省略号...
            </summary>
            <param name="str">源字符串</param>
            <param name="length">需要截取的长度</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Edit(System.String)">
            <summary>
            将字符串转换为编辑器中可用的字符串(替换掉换行符号)
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.EncodeQuote(System.String)">
            <summary>
            对双引号进行编码
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.EncodeTextarea(System.String)">
            <summary>
            让 html 在 textarea 中正常显示。替换尖括号和字符&amp;lt;与&amp;gt;
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetHtmlTitle(System.String)">
            <summary>
            获取 html 文档的标题内容
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetIntString(System.Int32,System.Int32)">
            <summary>
            将整数按照指定的长度转换为字符串，比如33转换为6位就是"000033"
            </summary>
            <param name="intValue"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetTitleCase(System.String)">
            <summary>
            得到字符串的 TitleCase 格式（首字母大写）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetCamelCase(System.String)">
            <summary>
            得到字符串的 CamelCase 格式
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetTypeName(System.String)">
            <summary>
            从类型的全名中获取类型名称(不包括命名空间)
            </summary>
            <param name="typeFullName"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetTypeName(System.Type)">
            <summary>
            获取类型名称(主要针对泛型做特殊处理)。如果要获取内部元素信息，请使用t.GetGenericArguments
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetTypeFullName(System.Type)">
            <summary>
            获取类型全名(主要针对泛型做特殊处理)，比如List&lt;String&gt;返回System.Collections.Generic.List。如果要获取内部元素信息，请使用t.GetGenericArguments
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetGenericTypeWithArgs(System.Type)">
            <summary>
            返回泛型的类型全名，包括元素名，比如System.Collections.Generic.List&lt;System.String&gt;
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsLetter(System.String)">
            <summary>
            只允许英文字符、短横杠和下划线
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsLetterNumber(System.String)">
            <summary>
            只能以英文开头，允许英文、数字、短横杠和下划线
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsLetterCanStartNumber(System.String)">
            <summary>
            只允许英文、数字、短横杠和下划线
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsHost(System.String)">
            <summary>
            是否是主机地址
            </summary>
            <param name="rawString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsUrlItem(System.String)">
            <summary>
            是否是英文、数字和下划线，但不能以下划线开头
            </summary>
            <param name="rawString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsChineseLetter(System.String)">
            <summary>
            是否全部都是中文字符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsAbcNumberAndChineseLetter(System.String)">
            <summary>
            只能以英文或中文开头，允许英文、数字、下划线和中文；
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsChineseLetter(System.String,System.Int32)">
            <summary>
            判断字符串的第N位是否中文字符
            </summary>
            <param name="input"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsColorValue(System.String)">
            <summary>
            是否是有效的颜色值(3位或6位，全部由英文字符或数字组成)
            </summary>
            <param name="aColor"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsSafeSqlString(System.String)">
            <summary>
            检测是否有Sql危险字符
            </summary>
            <param name="str">要判断字符串</param>
            <returns>判断结果</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetSafeSqlString(System.String)">
            <summary>
            获取安全的Sql参数值
            </summary>
            <param name="str">要处理的字符串</param>
            <returns>安全的Sql参数值</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetSafeSqlString(System.String,System.Boolean)">
            <summary>
            获取安全的Sql参数值
            </summary>
            <param name="str"></param>
            <param name="tolower"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsIP(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsIPv4(System.String)">
            <summary>
            是否为IPv4地址
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsIPv6(System.String)">
            <summary>
            是否为ip
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsNumber(System.String)">
            <summary>
            是否为数字（包含小数点、负号）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsMobile(System.String)">
            <summary>
            是否为手机号
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsIdentity(System.String)">
            <summary>
            是否为18位身份证号
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.IsUrlSafeChar(System.Char)">
            <summary>
            是否为SQL安全字符
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.UrlEncode(System.String,System.String)">
            <summary>
            返回 URL 字符串的编码结果
            </summary>
            <param name="str">字符串</param>
            <param name="encoding">编码类型，如（gb2312,utf-8,gbk），默认为utf-8</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.UrlEncode(System.String)">
            <summary>
            返回 URL 字符串的编码结果（UTF8）
            </summary>
            <param name="str">字符串</param>
            <returns>编码结果</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.UrlEncodeSymbol(System.String)">
            <summary>
            返回 URL 字符串的编码结果（UTF8，处理特殊符号）
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.UrlDecode(System.String,System.String)">
            <summary>
            返回 URL 字符串的解码结果
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
            <param name="encoding">编码类型，如（gb2312,utf-8,gbk），默认为utf-8</param>
        </member>
        <member name="M:Wlniao.Text.StringUtil.UrlDecode(System.String)">
            <summary>
            返回 URL 字符串的解码结果
            </summary>
            <param name="str">字符串</param>
            <returns>解码结果</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CreateId">
            <summary>
            生成带时间的24位标准ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CreateMinId">
            <summary>
            生成带时间的15位数字ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CreateLongId">
            <summary>
            生成带时间的36位数字ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CreateRndStr(System.Int32)">
            <summary>
            生成一个指定长度的随机字符串（仅有数字）
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CreateRndStrE(System.Int32)">
            <summary>
            生成一个指定长度的随机字符串(包含字母)
            </summary>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Sort(System.String[])">
            <summary>
            对字符串数组进行排序
            </summary>
            <param name="strS"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Join(System.String[])">
            <summary>
            用“,”并联一个字符串数组
            </summary>
            <param name="strS"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Join(System.String,System.String[])">
            <summary>
            并联一个字符串数组
            </summary>
            <param name="separator">分隔符</param>
            <param name="strS"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Join(System.String,System.String)">
            <summary>
            用斜杠/拼接两个字符串
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Join(System.String,System.String,System.String)">
            <summary>
            根据制定的分隔符拼接两个字符串
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ParseHtml(System.Object)">
            <summary>
            剔除 html 中的 tag
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ParseHtml(System.Object,System.Int32)">
            <summary>
            剔除 html 中的 tag，并返回指定长度的字符串
            </summary>
            <param name="html"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CutHtmlAndColse(System.String,System.Int32)">
            <summary>
            从 html 中截取指定长度的一段，并关闭未结束的 html 标签
            </summary>
            <param name="html"></param>
            <param name="count">需要截取的长度(小于20个字符按20个字符计算)</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CloseHtml(System.String)">
            <summary>
            关闭未结束的 html 标签
            (TODO 本方法临时使用，待重写)
            </summary>
            <param name="unClosedHtml"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Split(System.String,System.String)">
            <summary>
            将字符串分割成数组
            </summary>
            <param name="srcString"></param>
            <param name="separator"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.SqlClean(System.String,System.Int32)">
            <summary>
            过滤掉 sql 语句中的单引号，并返回指定长度的结果
            </summary>
            <param name="rawSql"></param>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.SubString(System.String,System.Int32)">
            <summary>
            从字符串中截取指定长度的一段，结果末尾没有省略号
            </summary>
            <param name="str"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Text2Html(System.String)">
            <summary>
            将纯文本中的换行符转换成html中换行符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Html2Text(System.String)">
            <summary>
            将html中换行符转换成纯文本中的换行符
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.TrimEnd(System.String,System.String)">
            <summary>
            从 srcString 的末尾剔除掉 trimString
            </summary>
            <param name="srcString"></param>
            <param name="trimString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.TrimStart(System.String,System.String)">
            <summary>
            从 srcString 的开头剔除掉 trimString
            </summary>
            <param name="srcString"></param>
            <param name="trimString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ResetScript(System.String)">
            <summary>
            将 html 中的脚本从各个部位，全部挪到页脚，以提高网页加载速度
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.SplitByNum(System.String,System.Int32)">
            <summary>
            将字符串分割成平均的n等份，每份长度为count
            </summary>
            <param name="str"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.TrimHtml(System.String)">
            <summary>
            将 html 中空白字符和空白标记(&amp;nbsp;)剔除掉
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetEndNumber(System.String)">
            <summary>
            截取字符串末尾的整数
            </summary>
            <param name="rawString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ConvertToHTML(System.String)">
            <summary>
            将Text字符串转换成HTML格式字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.HtmlDecode(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.HtmlEncode(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ConvertToJSString(System.String)">
            <summary>
             将Text字符串转换成javascript格式字符串
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ConvertToCHNNumber(System.Int32,System.Boolean)">
            <summary>
            将阿拉伯数字转换成中文数字
            </summary>
            <param name="number"></param>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ConvertToCHNNumber(System.Int32)">
            <summary>
            将数字转换成中文写法
            </summary>
            <param name="number"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Ellipsis(System.String,System.Int32,System.String)">
            <summary>
            按指定的长度截取字符串
            </summary>
            <param name="s"></param>
            <param name="l"></param>
            <param name="endStr"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.RemoveHtmlTag(System.String)">
            <summary>
            移除Html标签
            </summary>
            <param name="html"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.RemoveHtmlTagWithHold(System.String,System.String[])">
            <summary>
            移除Html标签(可保留部分)
            </summary>
            <param name="html"></param>
            <param name="holdTags">保留的 tag </param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.SubstringToHTML(System.String,System.Int32,System.String)">
            <summary>
            按字节长度截取字符串(支持截取带HTML代码样式的字符串)
            </summary>
            <param name="param">将要截取的字符串参数</param>
            <param name="length">截取的字节长度</param>
            <param name="end">字符串末尾补上的字符串</param>
            <returns>返回截取后的字符串</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetUTF8String(System.Byte[])">
            <summary>
            将字节数组读取为UTF8编码的字符串（其它编码自动转换）
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetUTF8String(System.Byte[],System.Int32,System.Int32)">
            <summary>
            将字节数组读取为UTF8编码的字符串（其它编码自动转换）
            </summary>
            <param name="buffer"></param>
            <param name="index"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetStringByUnicode(System.String)">
            <summary>
            Unicode转换为字符
            </summary>
            <param name="strUnicode">Unicode编码</param>
            <returns>字符</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetUnicodeByString(System.String)">
            <summary>
            字符转换为Unicode编码
            </summary>
            <param name="strInput">字符</param>
            <returns>Unicode编码</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Chs2Pinyin(System.Char)">
            <summary>
            汉字转换为拼音(首字母大写)
            </summary>
            <param name="ch">输入的汉字</param>
            <returns>输出的拼音</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Chs2Pinyin(System.String)">
            <summary>
            汉字转换为拼音(每个字的首字母大写)
            </summary>
            <param name="chrstr">输入的汉字</param>
            <returns>输出的拼音</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Chs2PinyinSplit(System.String)">
            <summary>
            汉字转换为拼音
            </summary>
            <param name="chrstr">输入的汉字</param>
            <returns>输出的拼音</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Chs2PinyinSpell(System.String)">
            <summary>
            依次取得字符串中每个字符的拼音首字母
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.Chs2PinyinSearch(System.String)">
            <summary>
            汉字转换为拼音（用于搜索）
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetByteByStr(System.String)">
            <summary>
            获取字符串数字
            </summary>
            <param name="strText"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetOnlyUpper(System.String)">
            <summary>
            取字符串中的大写字母
            </summary>
            <param name="src"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetTokenCharCount(System.String)">
            <summary>
            
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.UTF8ToGB2312(System.String)">
            <summary>
            utf-8 转换 gb2312
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GB2312ToUTF8(System.String)">
            <summary>
            gb2312 转换 utf-8
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ConvertUnicodeStringToChinese(System.String)">
            <summary>
            UNICODE字符转为中文，支持中英混排（编码\\uxxxx" 转换为"\uxxxx）
            </summary>
            <param name="unicodeString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.ConvertStringToUnicode(System.String)">
            <summary>
            
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CheckSensitiveWordsZhcn(System.String,System.String)">
            <summary>
            检测敏感词（自动过滤符号，只支持中文）
            </summary>
            <param name="content">需要检测的内容，如：超G强抗t△干dst△扰敏■■感※◇词 kljb过＆滤jb一■＆№正■№则匹◎←配代crSBtr码（只……支{持^中#^文）</param>
            <param name="blackwords">需要检测的关键字，如：(超强|抗干扰|敏感词|过滤|正则匹配|代码|只支持|中文)</param>
            <returns>检测到敏感词时，Result.IsValid为false，且Result.Errors为命中关键字列表</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CheckSensitiveWordsZhcn(System.String,System.String,System.Int32)">
            <summary>
            检测敏感词（自动过滤符号，只支持中文）
            </summary>
            <param name="content">需要检测的内容，如：超G强抗t△干dst△扰敏■■感※◇词 kljb过＆滤jb一■＆№正■№则匹◎←配代crSBtr码（只……支{持^中#^文）</param>
            <param name="blackwords">需要检测的关键字，如：(超强|抗干扰|敏感词|过滤|正则匹配|代码|只支持|中文)</param>
            <param name="times">最低命中次数</param>
            <returns>检测到敏感词时，Result.IsValid为false，且Result.Errors为命中关键字列表</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CheckSensitiveWords(System.String,System.String)">
            <summary>
            检测敏感词（自动过滤符号）
            </summary>
            <param name="content">需要检测的内容</param>
            <param name="blackwords">需要检测的关键字</param>
            <returns>检测到敏感词时，Result.IsValid为false，且Result.Errors为命中关键字列表</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.CheckSensitiveWords(System.String,System.String,System.Int32)">
            <summary>
            检测敏感词（自动过滤符号）
            </summary>
            <param name="content">需要检测的内容</param>
            <param name="blackwords">需要检测的关键字</param>
            <param name="times">最低命中次数</param>
            <returns>检测到敏感词时，Result.IsValid为false，且Result.Errors为命中关键字列表</returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetDomain(System.String)">
            <summary>
            根据完整的URL获取域名
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetDomainSplit(System.String,System.String@,System.String@)">
            <summary>
            获取域名主机和主域部分
            </summary>
            <param name="domain"></param>
            <param name="host"></param>
            <param name="main"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetDomainMain(System.String)">
            <summary>
            获取域名主域部分
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetDomainHost(System.String)">
            <summary>
            获取域名主机部分
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetDomainMainNoSuffix(System.String)">
            <summary>
            获取主域名无后缀部分
            </summary>
            <param name="domain"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetQueryString(System.String)">
            <summary>
            将查询字符串解析转换为名值集合.
            </summary>
            <param name="queryString"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.StringUtil.GetQueryString(System.String,System.Boolean)">
            <summary>
            将查询字符串解析转换为名值集合.
            </summary>
            <param name="queryString"></param>
            <param name="isEncoded"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.Text.UrlDecoder">
            <summary>
            Url编码解码工具
            </summary>
        </member>
        <member name="T:Wlniao.Text.UrlHelper">
            <summary>
            封装了 url 的操作
            </summary>
        </member>
        <member name="M:Wlniao.Text.UrlHelper.IsFullUrl(System.String)">
            <summary>
            检查url是否完整(是否以http开头或者以域名开头)
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.UrlHelper.hasCommonExt(System.String)">
            <summary>
            判断网址是否包含常见后缀名，比如 .htm/.html/.aspx/.jpg/.doc/.avi 等
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.UrlHelper.UrlHasExt(System.String)">
            <summary>
            判断网址是否包含后缀名，比如 xyzz/ab.htm 包含，my/xyz/dfae3 则不包含
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.Text.UrlHelper.TrimUrlExt(System.String)">
            <summary>
            剔除掉 url 的后缀名
            </summary>
            <param name="rawUrl">原始url</param>
            <returns>返回被剔除掉后缀名的 url</returns>
        </member>
        <member name="M:Wlniao.Text.UrlHelper.CompareUrlWithoutExt(System.String,System.String)">
            <summary>
            在不考虑后缀名的情况下，比较两个网址是否相同
            </summary>
            <param name="url1"></param>
            <param name="url2"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.XCore">
            <summary>
            XCore内部运行信息及状态
            </summary>
        </member>
        <member name="F:Wlniao.XCore.Lock">
            <summary>
            单线程锁
            </summary>
        </member>
        <member name="F:Wlniao.XCore._startup_time">
            <summary>
            框架初始化时间
            </summary>
        </member>
        <member name="M:Wlniao.XCore.Init">
            <summary>
            重新初始化状态
            </summary>
        </member>
        <member name="M:Wlniao.XCore.Info">
            <summary>
            输出系统信息
            </summary>
        </member>
        <member name="F:Wlniao.XCore.ValidateServerCertificate">
            <summary>
            内置SSL证书检查服务
            </summary>
        </member>
        <member name="F:Wlniao.XCore.ServerCertificateCustomValidationCallback">
            <summary>
            内置SSL证书检查服务
            </summary>
        </member>
        <member name="M:Wlniao.XCore.CloseServerCertificateValidation">
            <summary>
            关闭服务端SSL证书检查
            </summary>
        </member>
        <member name="P:Wlniao.XCore.NowUnix">
            <summary>
            当前系统Unix时间戳
            </summary>
        </member>
        <member name="P:Wlniao.XCore.StartupTime">
            <summary>
            程序启动时间
            </summary>
        </member>
        <member name="P:Wlniao.XCore.StartupRoot">
            <summary>
            程序启动路径，默认为 /
            </summary>
        </member>
        <member name="F:Wlniao.XCore.FrameworkRoot">
            <summary>
            框架的根目录
            </summary>
        </member>
        <member name="P:Wlniao.XCore.ListenPort">
            <summary>
            默认监听端口
            </summary>
        </member>
        <member name="P:Wlniao.XCore.ListenUrls">
            <summary>
            默认监听地址
            </summary>
        </member>
        <member name="P:Wlniao.XCore.IsDevTest">
            <summary>
            是否为开发测试环境
            </summary>
        </member>
        <member name="P:Wlniao.XCore.XServerId">
            <summary>
            服务器Id
            </summary>
        </member>
        <member name="P:Wlniao.XCore.XServerIP">
            <summary>
            服务器IP
            </summary>
        </member>
        <member name="P:Wlniao.XCore.Version">
            <summary>
            XCore版本号
            </summary>
        </member>
        <member name="P:Wlniao.XCore.ProgramVersion">
            <summary>
            当前程序版本号
            </summary>
        </member>
        <member name="P:Wlniao.XCore.PublishTime">
            <summary>
            当前程序发布时间(UnixTime)
            </summary>
        </member>
        <member name="P:Wlniao.XCore.WebNode">
            <summary>
            当前程序Web服务节点(通过WLN_NODE进行设置)
            </summary>
        </member>
        <member name="P:Wlniao.XCore.WebHost">
            <summary>
            当前程序Web服务地址(通过WLN_HOST进行设置)
            </summary>
        </member>
        <member name="T:Wlniao.XServer.Common">
            <summary>
            XServer请求工具
            </summary>
        </member>
        <member name="F:Wlniao.XServer.Common.OpenHost">
            <summary>
            开放接口主机地址
            </summary>
        </member>
        <member name="M:Wlniao.XServer.Common.Init">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.XServer.Common.Instance">
            <summary>
            App实例
            </summary>
        </member>
        <member name="P:Wlniao.XServer.Common.Instance.HostAddress">
            <summary>
            主机地址
            </summary>
        </member>
        <member name="P:Wlniao.XServer.Common.Instance.Weight">
            <summary>
            权重
            </summary>
        </member>
        <member name="P:Wlniao.XServer.Common.Instance.FailCount">
            <summary>
            失败次数
            </summary>
        </member>
        <member name="P:Wlniao.XServer.Common.Instance.Pressure">
            <summary>
            实时压力指数
            </summary>
        </member>
        <member name="M:Wlniao.XServer.Common.Instance.Start">
            <summary>
            开始请求实例
            </summary>
        </member>
        <member name="M:Wlniao.XServer.Common.Instance.Success">
            <summary>
            报告成功
            </summary>
        </member>
        <member name="M:Wlniao.XServer.Common.Instance.Failed">
            <summary>
            报告失败
            </summary>
        </member>
        <member name="T:Wlniao.XServer.Common.CommonApp">
            <summary>
            App实例
            </summary>
        </member>
        <member name="M:Wlniao.XServer.Common.CommonApp.#ctor(System.String)">
            <summary>
            实例化一个APP
            </summary>
            <param name="App"></param>
        </member>
        <member name="M:Wlniao.XServer.Common.CommonApp.#ctor(System.String,System.String)">
            <summary>
            实例化一个APP
            </summary>
            <param name="AppCode"></param>
            <param name="HostAddress"></param>
        </member>
        <member name="M:Wlniao.XServer.Common.CommonApp.Add(System.String,System.Int32)">
            <summary>
            添加一个本地实例
            </summary>
            <param name="HostAddress">实例地址</param>
            <param name="Weight">权重</param>
        </member>
        <member name="M:Wlniao.XServer.Common.GetInstances(System.String)">
            <summary>
            App的实例
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="P:Wlniao.XServer.Common.App">
            <summary>
            当前配置的AppCode
            </summary>
        </member>
        <member name="P:Wlniao.XServer.Common.AppId">
            <summary>
            当前配置的XServerAppId
            </summary>
        </member>
        <member name="P:Wlniao.XServer.Common.Secret">
            <summary>
            当前配置的XServerSecret
            </summary>
        </member>
        <member name="M:Wlniao.XServer.Common.GetResponseString(System.String)">
            <summary>
            发起Get请求
            </summary>
            <param name="url">请求的Url</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.PostResponseString(System.String,System.String,System.String)">
            <summary>
            发起Post请求
            </summary>
            <param name="url"></param>
            <param name="postData"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.PostResponseString(System.String,System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Get(System.Int32,Wlniao.XServer.Common.CommonApp,System.String,System.String,System.Collections.Generic.List{Wlniao.ApiLog}@,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            发起XServerGet请求（引擎通过HttpEngine配置）
            </summary>
            <param name="engine">引擎模式（0:restsharp 1:socket 2:httpclient）</param>
            <param name="common"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="logs"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Get(Wlniao.XServer.Common.CommonApp,System.String,System.String,System.Collections.Generic.List{Wlniao.ApiLog}@,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            发起XServerGet请求（引擎通过HttpEngine配置）
            </summary>
            <param name="common"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="logs"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Get(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            发起XServerGet请求
            </summary>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Get(System.String,System.String,System.String,System.Collections.Generic.List{Wlniao.ApiLog}@,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="logs"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Get``1(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.GetOnlyData(System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            Get请求但只返回成功后的data部分
            </summary>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Post(Wlniao.XServer.Common.CommonApp,System.String,System.String,System.String,System.Collections.Generic.List{Wlniao.ApiLog}@,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="common"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="postData"></param>
            <param name="logs"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Post(System.String,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="postData"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Post(System.String,System.String,System.String,System.String,System.Collections.Generic.List{Wlniao.ApiLog}@,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="postData"></param>
            <param name="logs"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Post``1(System.String,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="postData"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Post(Wlniao.XServer.Common.CommonApp,System.String,System.String,System.IO.Stream,System.Collections.Generic.List{Wlniao.ApiLog}@,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="common"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="stream"></param>
            <param name="logs"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Post(System.String,System.String,System.String,System.IO.Stream,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="stream"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Post(System.String,System.String,System.String,System.IO.Stream,System.Collections.Generic.List{Wlniao.ApiLog}@,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="stream"></param>
            <param name="logs"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.Post``1(System.String,System.String,System.String,System.IO.Stream,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="app"></param>
            <param name="controller"></param>
            <param name="action"></param>
            <param name="stream"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.GetAppHost(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="app"></param>
            <param name="https"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.SetAppHost(System.String,System.String)">
            <summary>
            设置AppHost
            </summary>
            <param name="app"></param>
            <param name="host"></param>
        </member>
        <member name="M:Wlniao.XServer.Common.CreateUrl(System.Boolean,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="sig"></param>
            <param name="app"></param>
            <param name="path"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.CreateUrl(System.Boolean,System.String,System.String,System.String,System.Collections.Generic.KeyValuePair{System.String,System.String}[])">
            <summary>
            
            </summary>
            <param name="sig"></param>
            <param name="app"></param>
            <param name="host"></param>
            <param name="path"></param>
            <param name="kvs"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.Common.CheckUrl(System.String)">
            <summary>
            
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.XServer.TokenApi">
            <summary>
            TokenApi服务端请求工具
            </summary>
        </member>
        <member name="M:Wlniao.XServer.TokenApi.Request``1(System.String,System.String,System.Object,System.String)">
            <summary>
            获取平台接口数据
            </summary>
            <typeparam name="T"></typeparam>
            <param name="url"></param>
            <param name="token"></param>
            <param name="data"></param>
            <param name="traceid"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.XServer.XsApp">
            <summary>
            XServer服务App信息实体
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XsApp.appid">
            <summary>
            AppId
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XsApp.secret">
            <summary>
            Secret
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XsApp.domain">
            <summary>
            Domain
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XsApp.appcode">
            <summary>
            AppCode
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XsApp.appname">
            <summary>
            App业务名称
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XsApp.xclient">
            <summary>
            App是否为XClient
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XsApp.GetById(System.String)">
            <summary>
            
            </summary>
            <param name="AppId"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XsApp.GetInstances(System.String)">
            <summary>
            通过AppCode获取服务实例列表
            </summary>
            <param name="AppCode">如datapi/control/website等</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XsApp.GetInstancesByAppId(System.String)">
            <summary>
            通过AppId获取服务实例列表
            </summary>
            <param name="AppId"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.XServer.XStorage">
            <summary>
            综合存储服务
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XStorage.UploadPath">
            <summary>
            上传路径
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XStorage.XStorageUrl">
            <summary>
            XStorage访问地址
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XStorage.XStorageUrls">
            <summary>
            XStorage地址列表
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.ConvertUrlToStorage(System.String)">
            <summary>
            转换为XStorage存储格式（去除Host部分）
            </summary>
            <param name="SourceUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.ConvertUrlsToStorage(System.String)">
            <summary>
            转换为XStorage存储格式（去除Host部分）
            </summary>
            <param name="SourceUrls"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.ConvertUrlsToFullUrls(System.String)">
            <summary>
            添加XStorageUrl
            </summary>
            <param name="SourceUrls"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.ConvertUrlToFullUrl(System.String)">
            <summary>
            添加XStorageUrl
            </summary>
            <param name="SourceUrl"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.ConvertUrlToFullUrl(System.String,System.Boolean,System.String)">
            <summary>
            添加XStorageUrl
            </summary>
            <param name="SourceUrl"></param>
            <param name="darwing"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.ConvertHtmlToStorage(System.String)">
            <summary>
            简化HTML内容中的图片地址
            </summary>
            <param name="SourceStr"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.ConvertHtmlToFullUrl(System.String)">
            <summary>
            还原HTML内容中的图片地址
            </summary>
            <param name="DataStr"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.ConvertHtmlToFullUrl(System.String,System.Boolean,System.String)">
            <summary>
            还原HTML内容中的图片地址
            </summary>
            <param name="DataStr"></param>
            <param name="darwing"></param>
            <param name="suffix"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.SaveUrl(System.String,System.String)">
            <summary>
            保存在线文件
            </summary>
            <param name="FileName"></param>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upload(System.String,System.IO.Stream)">
            <summary>
            上传文件
            </summary>
            <param name="FileName"></param>
            <param name="stream"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upload(System.String,System.Byte[])">
            <summary>
            上传文件
            </summary>
            <param name="FileName"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.UploadLocal(System.String,System.Byte[])">
            <summary>
            上传文件至本地目录
            </summary>
            <param name="absolutePath">文件的绝对路径</param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Read(System.String)">
            <summary>
            读取文件
            </summary>
            <param name="FileName"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.XServer.XStorage.Local">
            <summary>
            本地存储
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XStorage.Local.Using">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XStorage.Local.Path">
            <summary>
            本地存储的路径
            </summary>
        </member>
        <member name="T:Wlniao.XServer.XStorage.Upyun">
            <summary>
            Upyun设置
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.Load">
            <summary>
            加载配置的参数
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XStorage.Upyun.Using">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.FormApi(System.Int32,System.Int32)">
            <summary>
            FormAPI参数
            </summary>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.FormApi(System.Int32,System.Int32,System.String)">
            <summary>
            FormAPI参数
            </summary>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小</param>
            <param name="dir">上传目录</param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.XServer.XStorage.Upyun.FileInfo">
            <summary>
            文件信息
            </summary>
        </member>
        <member name="F:Wlniao.XServer.XStorage.Upyun.FileInfo.type">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.XServer.XStorage.Upyun.FileInfo.size">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.XServer.XStorage.Upyun.FileInfo.date">
            <summary>
            
            </summary>
        </member>
        <member name="T:Wlniao.XServer.XStorage.Upyun.FolderItem">
            <summary>
            文件夹信息
            </summary>
        </member>
        <member name="F:Wlniao.XServer.XStorage.Upyun.FolderItem.filename">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.XServer.XStorage.Upyun.FolderItem.filetype">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.XServer.XStorage.Upyun.FolderItem.size">
            <summary>
            
            </summary>
        </member>
        <member name="F:Wlniao.XServer.XStorage.Upyun.FolderItem.number">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.FolderItem.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="filetype"></param>
            <param name="size"></param>
            <param name="number"></param>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.setApiDomain(System.String)">
            切换 API 接口的域名
            @param $domain {默认 v0.api.upyun.com 自动识别, v1.api.upyun.com 电信, v2.api.upyun.com 联通, v3.api.upyun.com 移动}
            return null;
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.setAuthType(System.Boolean)">
            <summary>
            是否启用 又拍签名认证（默认 false）
            true:启用又拍签名认证
            false:直接使用basic auth
            </summary>
            <param name="authType"></param>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.GetFolderUsage(System.String)">
            <summary>
            获取某个子目录的占用信息
            </summary>
            <param name="folder">文件夹路径（为空即整个Bucket）</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.mkDir(System.String)">
            <summary>
            创建目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.rmDir(System.String)">
            <summary>
            删除目录
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.readDir(System.String)">
            读取目录列表
            @param $path 目录路径
            return array 数组 或 null
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.WriteStr(System.String,System.String)">
            <summary>
            将字符串写入文件
            </summary>
            <param name="path"></param>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.WriteFile(System.String,System.Byte[])">
            <summary>
            上传文件
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.DeleteFile(System.String)">
            删除文件
            @param $file 文件路径（包含文件名）
            return true or false
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.ReadStr(System.String)">
            <summary>
            从文件读取字符串
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.ReadFile(System.String)">
            读取文件
            @param $file 文件路径（包含文件名）
            @param $output_file 可传递文件IO数据流（默认为 null，结果返回文件内容，如设置文件数据流，将返回 true or false）
            return 文件内容 或 null
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.GetFileInfo(System.Collections.Hashtable,System.String)">
            获取文件信息
            @param $file 文件路径（包含文件名）
            return array('type'=> file | folder, 'size'=> file size, 'date'=> unix time) 或 null
        </member>
        <member name="M:Wlniao.XServer.XStorage.Upyun.md5_file(System.String)">
            <summary>
            计算文件的MD5码
            </summary>
            <param name="pathName"></param>
            <returns></returns>
        </member>
        <member name="T:Wlniao.XServer.XStorage.Aliyun">
            <summary>
            Aliyun设置
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Aliyun.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Aliyun.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XStorage.Aliyun.isUsing">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Aliyun.newWorker(System.String,System.String,System.Byte[],System.Collections.Hashtable,System.String@)">
            <summary>
            执行一个新任务
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <param name="postData"></param>
            <param name="headers"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Aliyun.formApi(System.Int32,System.Int32)">
            <summary>
            FormAPI参数
            </summary>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Aliyun.formApi(System.String,System.Int32,System.Int32)">
            <summary>
            FormAPI参数
            </summary>
            <param name="dir">上传目录</param>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小（单位：M）</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Aliyun.writeFile(System.String,System.Byte[],System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Aliyun.FormApi(System.Int32,System.Int32)">
            <summary>
            FormAPI参数
            </summary>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Aliyun.FormApi(System.String,System.Int32,System.Int32)">
            <summary>
            FormAPI参数
            </summary>
            <param name="dir">上传目录</param>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小（单位：M）</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.Aliyun.WriteFile(System.String,System.Byte[])">
            <summary>
            上传文件
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="P:Wlniao.XServer.XStorage.Aliyun.Using">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="T:Wlniao.XServer.XStorage.QCloud">
            <summary>
            QCloud设置
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.QCloud.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.QCloud.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
        </member>
        <member name="P:Wlniao.XServer.XStorage.QCloud.isUsing">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.QCloud.newWorker(System.String,System.String,System.Byte[],System.Collections.Hashtable,System.String@)">
            <summary>
            执行一个新任务
            </summary>
            <param name="method"></param>
            <param name="path"></param>
            <param name="postData"></param>
            <param name="headers"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.QCloud.formApi(System.Int32,System.Int32)">
            <summary>
            FormAPI参数
            </summary>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.QCloud.formApi(System.String,System.Int32,System.Int32)">
            <summary>
            FormAPI参数
            </summary>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小（单位：M）</param>
            <param name="dir">上传目录</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.QCloud.writeFile(System.String,System.Byte[],System.String@)">
            <summary>
            上传文件
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="P:Wlniao.XServer.XStorage.QCloud.Using">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="M:Wlniao.XServer.XStorage.QCloud.FormApi(System.Int32,System.Int32)">
            <summary>
            FormAPI参数
            </summary>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.QCloud.FormApi(System.String,System.Int32,System.Int32)">
            <summary>
            FormAPI参数
            </summary>
            <param name="expire">过期时间（单位：秒）</param>
            <param name="max">文件最大大小（单位：M）</param>
            <param name="dir">上传目录</param>
            <returns></returns>
        </member>
        <member name="M:Wlniao.XServer.XStorage.QCloud.WriteFile(System.String,System.Byte[])">
            <summary>
            上传文件
            </summary>
            <param name="path"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
    </members>
</doc>
