<div id="app" class="wln-layout">
    <template>
        <div class="wln">
            <div>
                <span style="float:right"><el-button type="primary" icon="el-icon-list" onclick="location.href='/system/labels'">标签名称管理</el-button></span>
                <el-input v-model="query.key" placeholder="按 名称 进行筛选" v-on:keydown.enter.native="refresh" style="width:300px" clearable></el-input>
                <el-button type="info" icon="el-icon-refresh" @@click="refresh">筛选</el-button>
                <el-button type="primary" icon="el-icon-plus" @@click="toAdd">新建应用</el-button>
                <el-button type="warning" icon="el-icon-upload" @@click="toImport">导入应用</el-button>
            </div>
            <div class="wln-line"></div>
            <el-table :data="rows" :empty-text="message">
                <el-table-column width="50" align="center" property="sort"></el-table-column>
                <el-table-column width="100" align="center" label="@Html.Raw(ViewBag.LabelApp)">
                    <template scope="scope">
                        <el-popover trigger="hover" placement="right">
                            <p>服务端: {{ scope.row.host }}</p>
                            <div slot="reference" class="name-wrapper">{{ scope.row.app }}</div>
                        </el-popover>
                    </template>
                </el-table-column>
                <el-table-column width="150" property="name" label="名称"></el-table-column>
                <el-table-column></el-table-column>
                <el-table-column width="180" align="center" label="HTTPS协议">
                    <template scope="scope">
                        <el-tooltip :content="scope.row.https == '0' ? '点击开启使用HTTPS访问' : '点击关闭使用HTTPS访问'" placement="bottom">
                            <el-button size="mini" @@click="setHttps(scope.row)" type="warning" v-if="scope.row.https == '2'">强制跳转</el-button>
                            <el-button size="mini" @@click="setHttps(scope.row)" type="primary" v-else-if="scope.row.https == '1'">已开启</el-button>
                            <el-button size="mini" @@click="setHttps(scope.row)" type="info" v-else>未开启</el-button>
                        </el-tooltip>
                    </template>
                </el-table-column>
                <el-table-column width="168" align="center" label="Api Token">
                    <template scope="scope">
                        <el-button size="mini" type="primary" v-on:click="loadtoken(scope.row.app)">点击查看</el-button>
                    </template>
                </el-table-column>
                <el-table-column width="390" align="center" label="操作">
                    <template scope="scope">
                        <el-button size="mini" icon="el-icon-remove-outline" type="danger" @@click="setState(scope.row.app)" v-if="scope.row.sort < 0">未启用</el-button>
                        <el-button size="mini" icon="el-icon-check" type="success" @@click="setState(scope.row.app)" v-else>已启用</el-button>
                        <el-button size="mini" icon="el-icon-download" type="primary" v-on:click.native="window.open('apps?do=export&app=' + scope.row.app)">导出配置</el-button>
                        <el-button size="mini" icon="el-icon-menu" type="primary" @@click="toMenus(scope.row.app)">菜单管理</el-button>
                        <el-button size="mini" icon="el-icon-edit" type="primary" @@click="toEdit(scope.row.app)">编辑</el-button>
                        <el-button size="mini" icon="el-icon-delete" type="info" @@click="doDel(scope.row.app)">删除</el-button>
                    </template>
                </el-table-column>
            </el-table>
        </div>
        <div class="wln-mask-layout" v-if="mask">
            <div class="wln-mask-form" style="width:520px;">
                <div class="wln-title">应用信息<span><i class="el-icon-close" v-on:click="close"></i></span></div>
                <el-form label-width="120px">
                    <el-form-item label="应用编码">
                        <el-input v-model="form.app" placeholder="英文，如：demo" :disabled="form.id.length > 0" style="width:200px"></el-input> <span class="tips notnull"></span>
                    </el-form-item>
                    <el-form-item label="应用名称">
                        <el-input v-model="form.name" placeholder="" style="width:200px"></el-input> <span class="tips notnull"></span>
                    </el-form-item>
                    <el-form-item label="访问地址">
                        <el-input v-model="form.host" placeholder="" style="width:270px"></el-input> <span class="tips notnull"></span>
                    </el-form-item>
                    <el-form-item label="使用https">
                        <el-select v-model="form.https" style="width:110px">
                            <el-option label="已开启" :value="1"></el-option>
                            <el-option label="未开启" :value="0"></el-option>
                            <el-option label="强制跳转" :value="2"></el-option>
                        </el-select>
                    </el-form-item>
                    <el-form-item label="排序">
                        <el-input v-model="form.sort" placeholder="" style="width:110px"></el-input> <span class="tips">小于零则停用</span>
                    </el-form-item>
                    <el-form-item>
                        <el-button size="small" icon="el-icon-check" type="primary" v-on:click="onSubmit">提交</el-button>
                        <el-button size="small" icon="el-icon-close" v-on:click="close">取消</el-button>
                    </el-form-item>
                </el-form>
            </div>
        </div>
    </template>
</div>
<script type="text/javascript">
    var form = { id: '', app: '', name: '', host: '', https: 0, sort: 1 };
    new Vue({
        el: '#app',
        router: new VueRouter({ mode: 'history' }),
        data: function () {
            ds.form = {}
            ds.mask = false
            for (var i in form) { ds.form[i] = form[i] };
            return ds
        },
        methods: {
            refresh() {
                asyncPost(location.pathname + '?do=pager', this.query).then(res => {
                    this.rows = res.rows;
                    this.total = res.total
                    this.message = res.message;
                })
            },
            close() {
                this.mask = false
            },
            toImport() {
                let t = this
                uploader(location.pathname + '?do=import', '.json', (res) => {
                    if (res.success) {
                        t.refresh()
                        Vue.prototype.$alert(res.message)
                    } else {
                        Vue.prototype.$alert(res.message)
                    }
                })
            },
            toAdd() {
                for (var i in form) { this.form[i] = form[i] }
                this.mask = true
            },
            toEdit(app) {
                let t = this;
                for (var i in form) { t.form[i] = form[i] }
                post(location.pathname + '?do=get', { app: app }).then(res => {
                    if (res.success) {
                        for (var i in form) { t.form[i] = res[i] }
                        t.mask = true
                    } else {
                        Vue.prototype.$message({ type: 'info', message: res.message });
                    }
                });
            },
            toMenus(app) {
                openTab('/system/appmenu/' + app, '应用菜单')
            },
            loadtoken(app) {
                post(location.pathname + '?do=loadtoken', { app: app }).then(res => {
                    if (res.success) {
                        Vue.prototype.$prompt('应用API关系数据安全，请妥善保管！！！', 'Api Token查看', { inputValue: res.token, cancelButtonText: '关闭' }).then(({ value }) => { }).catch(() => { });
                    } else {
                        Vue.prototype.$message({ type: res.success ? 'success' : 'error', message: res.message });
                    }
                })
            },
            setHttps(row) {
                let t = this
                Vue.prototype.$confirm((row.https === 0 ? '开启前请确认模块可通过HTTPS地址访问' : '关闭后将可能面临流量劫持等安全问题') + ', 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    post(location.pathname + '?do=https', { app: row.app }).then(res => {
                        Vue.prototype.$message({ type: res.success ? 'success' : 'error', message: res.message });
                        t.refresh();
                    })
                }).catch(() => {
                    Vue.prototype.$message({ type: 'info', message: '操作已取消' });
                });
            },
            setState(app) {
                post(location.pathname + '?do=state', { app: app }).then(res => {
                    this.refresh();
                    sessionStorage.removeItem('session');
                    Vue.prototype.$message({ type: res.success ? 'success' : 'error', message: res.message });
                })
            },
            onSubmit: function () {
                post(location.pathname + '?do=set', this.form).then(res => {
                    Vue.prototype.$message({ type: res.success ? 'success' : 'error', message: res.message });
                    if (res.success) {
                        this.refresh();
                        this.mask = false;
                    }
                });
            },
            doDel(app) {
                Vue.prototype.$confirm('应用移除后相关功能将无法使用，但数据不会删除, 是否继续?', '提示', {
                    confirmButtonText: '继续',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    post(location.pathname + '?do=del', { app: app }).then(res => {
                        this.refresh();
                        sessionStorage.removeItem('session');
                        Vue.prototype.$message({ type: res.success ? 'success' : 'error', message: res.message });
                    })
                }).catch(() => {
                    Vue.prototype.$message({ type: 'info', message: '操作已取消' });
                });
            }
        },
        mounted() {
            this.refresh();
        }
    })
</script>